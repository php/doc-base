<?xml encoding="iso-8859-1"?>

 <chapter id="chapter-files">
  <title>File Overview</title>

  <para>
   There are many files used to produce the several output
   formats, and to store the many text and information needed
   to generate the files. These are the most important ones,
   you should know about:
   <variablelist>
    <varlistentry>
     <term><filename>manual.xml</filename></term>
     <listitem>
      <simpara>
       The main file for the documentation. It is supposed
       to be only a "glue" between the other parts, containing
       only part titles and entity references to chapters.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>chapters.ent</filename></term>
     <listitem>
      <simpara>
       Contains entity definitions for all chapters and
       appendices. Entities for the XML files are generated
       by configure, so <emphasis>you should not edit this file</emphasis>.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>global.ent</filename></term>
     <listitem>
      <simpara>
       Global internal text entities for all the XML
       files. This is where all the external links,
       email addresses, and "macros" are stored.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>your_language/language-defs.ent</filename></term>
     <listitem>
      <simpara>
       Contains local entities used by this language.
       Some common ones are the main part titles, but
       you should also put entities used only by this
       language's files here.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>your_language/language-snippets.ent</filename></term>
     <listitem>
      <simpara>
       Longer often used XML snippets translated to this
       language. Including common warnings, notes, etc.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </chapter>
 
 <chapter id="chapter-conventions">
  <title>Conventions</title>

  <para>
   When you work on <literal>phpdoc</literal> XML files,
   you should stick to these conventions, to ease the team
   work in the repository.
  </para>
  
  <para>
   <orderedlist>
    <listitem><simpara>
     Insert ID attributes in all major section tags such
     as part, chapter, sect1 etc. The HTML stylesheet will
     name the HTML files after these IDs.
    </simpara></listitem>
    <listitem><simpara>
     Function reference IDs look like this (case should
     be consistent with the rest of the function naming
     standards, i.e. lowercase): <literal>function.imageloadfont</literal>.
     Please note that since underscores cannot be used
     in IDs, they should be replaced by minus signs (-).
    </simpara></listitem>
    <listitem><simpara>
     Function section IDs
     (<literal>&lt;reference id="..."></literal>) look
     like this: 'ref.category', for example: 'ref.ftp'.
    </simpara></listitem>
    <listitem><simpara>
     The contents of examples with program listings
     start on column 0 in the XML code.
    </simpara></listitem>
    <listitem><simpara>
     All examples use the <literal>&lt;?php ... ?&gt;</literal>
     form instead of <literal>&lt;? ... ?&gt;</literal>. It
     can be useful to use <literal>&lt;![CDATA[ ... ]]&gt;</literal>
     for examples, since it eliminates the need to change 
     <literal>&lt;</literal> to <literal>&amp;lt;</literal>, etc.
    </simpara></listitem>
    <listitem><simpara>
     Indenting, bracketing and naming conventions in
     examples should adhere to the PEAR coding standards
     (it's in the manual). Deprecated aliases and syntax
     should not be used in examples.
    </simpara></listitem>
    <listitem><para>
     If an example uses arguments specific to a newer version of
     PHP, it is helpful to note this in the example:
     <programlisting>
foo("bar", "baz"); // second argument was added in PHP 4.0.3
     </programlisting>
     New arguments are denoted in the main text of the
     entry using the form
     <programlisting>
<![CDATA[
<note>
 <simpara>
  The second parameter was added in PHP 4.0.3.
 </simpara>
</note>
]]>
      </programlisting>
    </para></listitem>
    <listitem><simpara>
     The language constants true, false and null
     should be written as <literal>&amp;true;</literal>,
     <literal>&amp;false;</literal> and
     <literal>&amp;null;</literal>.
    </simpara></listitem>
    <listitem><simpara>
     All English XML files should have a <literal>&lt;!--
     &dollar;Revision --></literal> comment as the first line
     unless they contain an <literal>&lt;?xml</literal> tag, in which
     case the revision comment should be on the second
     line. Non-English files should not have this comment.
    </simpara></listitem>
    <listitem><simpara>
     Whitespace changes in the English tree should be
     prevented as much as possible: it is more important
     to keep a good change-history of real changes, because
     of the translations. If a whitespace change is
     <emphasis>really</emphasis> needed, do it at least
     in a separate commit, with a clear comment such as
     'WS fix' or 'Whitespace fix'.
    </simpara></listitem>
    <listitem><simpara>
     Never use tabs, not even in example program
     listings. XML should be indented with one
     space character for each level of indentation;
     example code uses four spaces (see PEAR standards).    
    </simpara></listitem>
    <listitem><simpara>
     Always use LF (Line Feed) for the only newline
     character in files, this is the Unix standard.
     Never use CR LF (Windows) or CR (Mac) even, when
     editing Windows specific files (such as
     *.bat). It eases the editing works.
    </simpara></listitem>
    <listitem>
     <simpara>
      In the docs, the types are denoted as:
      <literal>boolean</literal> (<literal>bool</literal>
      in prototypes), <literal>integer</literal>
      (<literal>int</literal> in prototypes),
      <literal>float</literal> (<emphasis>not
      double!</emphasis>), <literal>array</literal>,
      <literal>object</literal> (<emphasis>not class!</emphasis>),
      <literal>resource</literal> and <literal>null</literal>
      (all lowercase).
     </simpara>

     <simpara>
      In prototypes, you can also use <literal>mixed</literal>
      (various types), or <literal>number</literal> (either
      integer or float), or <literal>scalar</literal> (boolean,
      integer, float or string). A callback is denoted as
      <literal>mixed</literal> <footnote><simpara>Better
      suggestions? I don't really like it this way... not
      simply <literal>function</literal>, or something alike?
      --Jeroen</simpara></footnote>, since it can be either
      array or string.
     </simpara>

     <simpara>
      If a function requires no arguments, use
      <literal>&lt;void/></literal> instead of 
      <literal>&lt;parameter>void&lt;/parameter></literal>,
      since the former is the correct DocBook XML tag.
     </simpara>
     
     <simpara>
      If a function has an undefined return-value, use
      the word <literal>void</literal>.
     </simpara>
    </listitem>
    <listitem><simpara>
     In a prototype, if there are multiple - really
     distinct - possibilities, simply make it two!
     See <literal>math.xml:min()</literal> for an example.
    </simpara></listitem>
    <listitem><simpara>
     Aliases: in refpurpose, put:
     <literal>Alias of &lt;function>realfunc&lt;/function></literal>.
     <emphasis>Do not specify a funcsynopsis, and
     nothing but simply the text:</emphasis>
     <literal>This function is an alias of
     &lt;function>realfunc&lt;/function></literal>.
     This way, people can click to realfunc
     straight from the <literal>ref.foo</literal> page.
    </simpara></listitem>
   </orderedlist>
  </para>
 </chapter>

 <chapter id="chapter-what-to-document">
  <title>What to Document?</title>

  <para>
   <orderedlist>
    <listitem>
     <simpara>
      Only major functions should be documented; functions which are
      deprecated variants may be mentioned, but should not be
      documented as separate functions. They instead should be
      referenced in the parent function as an alias. Functions which
      have completely different names, however, should be documented as
      separate entries, for ease of reference. The aliases.xml appendix
      is the place to store aliases not documented elsewhere.
     </simpara>
       
     <simpara>
      For example <literal>mysql_db_name</literal> and
      <literal>mysql_dbname</literal> will be documented as the same
      function, with the latter being listed as an alias of the 
      former, while <literal>show_source</literal> and
      <literal>highlight_file</literal> will be documented as two
      different functions (one as an alias), as the names are
      completely different, and one name is not likely to be found
      if looking for the name of the other.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Function names should be created, and documented, in lowercase
      format with an underscore separating the name components. If
      there are several variants, use the one with the least amount
      of components.
     </simpara>
     <simpara>
      Good: <literal>mcrypt_enc_self_test</literal>,
      <literal>mysql_list_fields</literal>
     </simpara>
     <simpara>
      OK: <literal>mcrypt_module_get_algo_supported_key_sizes</literal>
      (could be <literal>mcrypt_mod_get_algo_sup_key_sizes</literal>?),
      <literal>get_html_translation_table</literal>
      (could be <literal>html_get_trans_table</literal>?)
     </simpara>
     <simpara>
      Bad: <literal>hw_GetObjectByQueryCollObj</literal>,
      <literal>pg_setclientencoding</literal>
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Functions which are kept only for backwards compatibility should
      be listed under their current parent names, and not documented as
      separate functions. Backwards compatible functions and
      documentation for them should be maintained as long as the code
      can be reasonably kept as part of the PHP codebase. Also see
      the appendix <filename>aliases.xml</filename>.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Short code examples are much more desirable than long ones.
      If a function is extremely complex, a suitable place to put
      a longer example is in the chapter introduction. This example
      can hold code for other functions in the same chapter.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Brevity is appreciated. Long winded descriptions of each and
      every function are not appropriate for the reference sections.
      Using the errata comments as guidelines, it's easier to tell when
      more documentation is needed, as well as the inverse, when too
      much documentation in one section has increased confusion.  
     </simpara>
    </listitem>
   </orderedlist>
  </para>
 </chapter>
 
 <chapter id="chapter-skeletons">
  <title>Documentation Skeletons</title>

  <para>
   Below are some "skeletons" to copy and paste from when adding
   documentation.
  </para>
  <para>
   <example>
    <title>Function reference file in lang/functions/</title>
    <programlisting>
<![CDATA[
 <reference>
  <title></title>
  <titleabbrev></titleabbrev>

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
]]>    
    </programlisting>
   </example>
  </para>

  <para>
   <example>
    <title>Function reference entry</title>
    <programlisting>
<![CDATA[
  <refentry id="function.">
   <refnamediv>
    <refname></refname>
    <refpurpose></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Description</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>RETURNTYPE <function>FUNCTIONNAME</function></funcdef>
      <paramdef>ARGTYPE1 <parameter>ARGNAME1</parameter></paramdef>
      <paramdef>ARGTYPE2 <parameter>ARGNAME2</parameter></paramdef>
      <paramdef>ARGTYPE3
       <parameter><optional>ARGNAME3</optional></parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <simpara>
     A simple paragraph that can not contain anything that requires
     fancy layout.
    </simpara>
    <para>
     A normal paragraph that can contain lots of stuff.  For example
     <example>
      <title>Code examples</title>
      <programlisting role="php">
// Use CDATA is you would like to add lots of < to the code

/* Do all indentation with spaces, not tabs, just to be sure.
 * Don't try pushing the code to the right by adding spaces in
 * front, this is the style sheet's job.
 */
 
// a function example
function some_code($foo)
{
    /* use four spaces of indentation */
}

// an example of bracket usage and spacing, always use
// brackets, even when they are physically not needed
if (some_code($foo) == "foo") {
    echo "foo";
} elseif (some_code($foo) == "bar") {
    echo "bar";
} else {
    echo "No foo, no bar";
}

// Include end of CDATA, if you started with CDATA
      </programlisting>
     </example>

     The text in a paragraph may continue after the example as well.
     Here is how to make lists:

     <itemizedlist>
      <listitem>
       <simpara>
        List items must contain a container element such as
        simpara or para (there are plenty of others too, see the
        DocBook reference for the listitem element.
       </simpara>
      </listitem>

      <listitem>
       <simpara>
        List items must contain simple paragraphs or paragraphs.
       </simpara>
      </listitem>
     </itemizedlist>
     
     <itemizedlist>
      <listitem>
       <para>
        If you plan on making sub-lists, you must use para 
        <orderedlist>
         <listitem><simpara> first list item</simpara></listitem>
         <listitem><simpara> second list item</simpara></listitem>
        </orderedlist>
        You can also continue an ordered list you just left off
        <orderedlist>
         <listitem><simpara> third list item</simpara></listitem>
         <listitem><simpara> fourth list item</simpara></listitem>
        </orderedlist>
       </para>
      </listitem>
     </itemizedlist>

    </para>
    <simpara>
     The documentation for a function should be wrapped up with
     a "See also" list like this:
    </simpara>
    <simpara>
     See also <function>stripslashes</function> and
     <function>quotemeta</function>.
    </simpara>
   </refsect1>
  </refentry>
]]>    
    </programlisting>
   </example>
  </para>
  <para>
   For technical reasons, the CDATA start tag: <literal>&lt;![CDATA[</literal>
   and the CDATA end tag: <literal>]]&gt;</literal> is not included
   in the program code above, just the place of them are marked.
  </para>
 </chapter>

 <chapter id="chapter-misc">
  <title>Miscellaneous Notes</title>

  <para>
   Misc. notes that don't need a full section. (stuff like
   http://www.zend.com/phpfunc/, etc.
  </para>
 </chapter>

 <!--
 
   ! These paras are from the howto.xml made by Stig (this
   ! is actually HTML). Can be useful to make the new XML
   ! file section.
 
  <a name="connecting.phpdoc"></a><h2>3.1. New SGML files</h2>

   The main file for the documentation is <tt>manual.sgml</tt>.  This
   file uses <i>entities</i> (can be compared to a combination of #define
   and #include in C) to include text from other files.  The entities
   that include the PHPDOC files are defined in the <i>preamble</i> of
  <tt>manual.sgml</tt>, which is the section between the "[" character
   on the first (DOCTYPE) line and "]&gt;".

  <p> Steps involved in connecting a new PHPDOC file:

  <ol>
  <li> Let us say you have written functions/ldap.phpdoc.  You should
   then add this to the preamble:
  <pre>
  <b>&lt;!entity ldapref system "functions/ldap.sgml"&gt;</b>
  </pre>

   This tells the SGML parser that when "ldapref" is referenced it
   should read the file <tt>functions/ldap.sgml</tt>.<p> <em>Note
   that the file name extension used here is not <tt>.phpdoc</tt>,
   but <tt>.sgml</tt>.  The Makefile handles the conversion.</em>
  <p>

  <li> Refer to the <i>ldapref</i> entity where you want to include it.
   Keep in mind that PHPDOC documents are converted into LINUXDOC
   sections.  Internal functions should be added to the "internal
   functions" chapter in <tt>chapters/functions.sgml</tt>.  Add
   something like this (the bold part is what to add):
  <pre>
   &lt;chapt&gt;Internal functions
   ...
  <b>&amp;ldapref;</b>
   ...
  </pre>

  <li> Then, to make sure the .phpdoc file is converted to .sgml,
   you have to tell make about it.  Add the <u>.sgml</u> file to
   the FUNCREF variable in <tt>Makefile.in</tt>.  Example (the bold
   text is the change):
  <pre>
   FUNCREF=functions/oracle.sgml \
  <b>functions/ldap.sgml \</b>
   functions/math.sgml \
   functions/mysql.sgml \
   functions/pgsql.sgml \
   functions/strings.sgml \
   functions/adabas.sgml
  </pre>

  <li> Finally, regenerate <tt>Makefile</tt>:
  <pre>
   (cd .. ; ./config.status)
  </pre>

  </ol>

  <a name="connecting.labels"></a><h2>3.2. Label name conventions</h2>

   When making or refering to labels in the LINUXDOC files, there are
   some conventions that should kept:

  <ul>
  <li> Internal functions have labels of the form
  <tt>func:<i>function_name</i></tt>.
  <li> Arguments to configure (when installing) have labels like the
   argument names.  For example, the -with-system-regex option has
   the label <tt>with_system_regex</tt>
  </ul>
  <hr>

   -->

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"howto.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

