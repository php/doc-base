<?xml version="1.0" encoding="iso-8859-1"?>

<chapter id="chapter-scripts">
 <title>Automatization with scripts</title>

 <para>
  The PHP manual is very big and the PHP sources change every day. To help the
  documentation writers's work, we have developed a couple of scripts during
  the last years. Below you will find a list of the scripts, as well a short
  explanation and usage tips for each one.
 </para>

 <sect1 id="scripts.extensions.xml.php">
  <title>extensions.xml.php</title>
  <para>
   The <filename>extensions.xml.php</filename> script creates the <ulink
    url="&url.extension.cat;">extension categorization appendix</ulink>. It
   collects the data from the reference.xml files and updates the
   <filename>en/appendices/extensions.xml</filename> file.
  </para>
  <para>
   The tags supported for the <filename>reference/*/reference.xml</filename>
   files include:
   <table>
    <title/>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>Tag</entry>
       <entry>Explanation</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>&lt;!-- Purpose: xx --&gt;</entry>
       <entry>
        <para>
         The purpose of the extension, specified by an ID. There are several
         IDs available, which can be consulted in the
         <filename>en/entensions.ent</filename> file. They look like
         <literal>database.vendors</literal> or <literal>xml</literal>.
        </para>
        <para>
         If none of the available categories fits your extension, you can
         create a new one. To do so, you must add a new entity in the
         <filename>en/entensions.ent</filename> file, like:
         <literal>&lt;!ENTITY extcat.purpose.xml '&lt;title&gt;XML
          Manipulation&lt;/title&gt;'&gt;</literal>. After this, you still
         need to edit <filename>en/appendices/extensions.xml</filename> and
         create a new section for your ID, by copying an already existent
         section. This isn't done automatically to allow you to choose the
         order of the sections.
        </para>
       </entry>
      </row>
      <row>
       <entry>&lt;!-- Membership: xx, yy --&gt;</entry>
       <entry>
        This tag can have multiple values, that should be separated by commas.
        Valid values include: <literal>core</literal> (for PHP core
        extensions, like the strings or date extension),
        <literal>pecl</literal> (if the extension lives in PECL),
        <literal>bundled</literal> (if the extension is bundled with the main
        PHP distribution), and <literal>external</literal> (if the extension
        relies on external - and not bundled - libraries).
       </entry>
      </row>
      <row>
       <entry>&lt;!-- State: xx --&gt;</entry>
       <entry>
        This tag is optional and can only have two values, either
        <literal>deprecated</literal> or <literal>experimental</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
  <note>
   <para>
    If you mark an extension as deprecated and if it is very old and unusable,
    you shouldn't add the purpose and membership tags, so that the extension
    doesn't appear in the appendix (to avoid confusing users).
   </para>
  </note>
  <para>
   The script should warn you for missing tags or even bogus values, although
   it won't report any XML errors. So, you have the responsability to run
   <command>make test</command> before running this script. Failing to do so,
   may lead to unexpected results.
  </para>
  <note>
   <para>
    This script requires PHP &gt;= 5 with SimpleXML.
   </para>
  </note>
 </sect1>
  
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"howto.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

