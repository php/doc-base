<?xml version="1.0" encoding="iso-8859-7"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.50 Maintainer: daphnie Status: ready -->
 <chapter id="language.operators">
  <title>Τελεστές</title>
  <simpara>
  </simpara>
  
  <sect1 id="language.operators.precedence">
   <title>Προτεραιότητα τελεστών</title>
   <para>
    Η προτεραιότητα των τελεστών καθορίζει το πόσο "σφιχτά" συνδέει δυο
    εκφράσεις μαζί. Για παράδειγμα, στην έκφραση <literal>1 +
    5 * 3</literal>, η απάντηση είναι <literal>16</literal> και όχι
    <literal>18</literal> επειδή ο τελεστής του πολλαπλασιασμού ("*")
    έχει προτεραιότητα σε σχέση με τον τελεστή της πρόσθεσης ("+").
    Οι παρενθέσεις μπορούν να χρησιμοποιηθούν για να αλλάξουν τις προτεραιότητες, αν χρειάζεται. Για
    παράδειγμα: <literal>(1 + 5) * 3</literal> έχει ως αποτέλεσμα το
    <literal>18</literal>.
   </para>
   <para>
    Ο ακόλουθος πίνακας παραθέτει την προτεραιότητα των τελεστών με την χαμηλότερη
    προτεραιότητα να παραθέτεται πρώτη.
    <table>
     <title>Operator Precedence</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Σχετικότητα</entry>
        <entry>Τελεστές</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>αριστερή</entry>
        <entry>,</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>or</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>xor</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>and</entry>
       </row>
       <row>
        <entry>δεξιά</entry>
        <entry>print</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>
         = += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;=
        </entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>? :</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>||</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>&amp;&amp;</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>|</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>^</entry>
       </row>
       <row>
        <entry>αριστερή</entry>
        <entry>&amp;</entry>
       </row>
       <row>
        <entry>Χωρίς σύνδεση</entry>
        <entry>== != === !==</entry>
       </row>
       <row>
        <entry>Χωρίς σύνδεση</entry>
        <entry>&lt; &lt;= &gt; &gt;=</entry>
       </row>
       <row>
        <entry>Αριστερή</entry>
        <entry>&lt;&lt; &gt;&gt;</entry>
       </row>
       <row>
        <entry>Αριστερή</entry>
        <entry>+ - .</entry>
       </row>
       <row>
        <entry>Αριστερή</entry>
        <entry>* / %</entry>
       </row>
       <row>
        <entry>Δεξιά</entry>
        <entry>! ~ ++ -- (int) (float) (string) (array) (object) @</entry>
       </row>
       <row>
        <entry>Δεξιά</entry>
        <entry>[</entry>
       </row>
       <row>
        <entry>Χωρίς σύνδεση</entry>
        <entry>new</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <note>
    <para>
     Παρόλο που το <literal>!</literal> έχει προτεραιότητα έναντι του
     <literal>=</literal>, η PHP επιτρέπει εκφράσεις παρόμοιες
     με την ακόλουθη: <literal>if (!$a = foo())</literal>,
     και σε κάθε περίπτωση το αποτέλεσμα από την <literal>foo()</literal> 
     τοποθετείται στην <varname>$a</varname>.
    </para>
   </note>
  </sect1>

  <sect1 id="language.operators.arithmetic">
   <title><Αριθμητικοί Τελεστές/title>
   <simpara>
    Θυμάστε τη βασική αριθμητική από το σχολείο; Αυτά δουλέυουν ακριβώς
    όπως εκείνη.
   </simpara>
   <table>
    <title>Αριθμητικοί Τελεστές</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Παράδειγμα</entry>
       <entry>Όνομα</entry>
       <entry>Αποτέλεσμα</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a + $b</entry>
       <entry>Πρόσθεση</entry>
       <entry>Αποτέλεσμα του $a και του $b.</entry>
      </row>
      <row>
       <entry>$a - $b</entry>
       <entry>Αφαίρεση</entry>
       <entry>Διαφορά του $a και του $b.</entry>
      </row>
      <row>
       <entry>$a * $b</entry>
       <entry>Πολλαπλασιασμός</entry>
       <entry>Γινόμενο του $a και του $b.</entry>
      </row>
      <row>
       <entry>$a / $b</entry>
       <entry>Διαίρεση</entry>
       <entry>Αποτέλεσμα του $a και του $b.</entry>
      </row>
      <row>
       <entry>$a % $b</entry>
       <entry>Modulus</entry>
       <entry>Υπόλοιπο του $a διαιρεμένου από το $b.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <simpara>
    Ο τελεστής διαίρεσης ("/") επιστρέφει μια τιμή κινητής υποδιαστολής κάθε φορά,
    ακόμη και αν οι δυο τελεστές είναι ακέραιοι (ή strings που μετατρέπονται
    σε ακέραιους).
   </simpara>
   <simpara>
    Δείτε επίσης και το εγχειρίδιο στη σελίδα 
    <link linkend="ref.math">Μαθηματικές Συναρτήσεις</link>. 
   </simpara>

   <!--
   <simpara>
    Ο τελεστής διαίρεσης ("/") επιστρέφει μια ακέραια τιμή (το αποτέλεσμα
    μιας ακέραιας διαίρεσης) αν δυο τελεστές είναι ακέραιοι (ή
    strings που μετατρέπονται σε ακέραιους) και το αποτέλεσμα είναι
    ακέραιος. Αν οποιοσδήποτε τελεστής έχει τιμή κινητής υποδιαστολής, ή το
    αποτέλεσμα της πράξης είναι μη-ακέραια τιμή, επιστρέφεται μια τιμή κινητής
    υποδιαστολής.
   </simpara>
   -->
  </sect1>
  
  <sect1 id="language.operators.assignment">
   <title>Ανάθεση Τελεστών</title>
   <simpara>
    Ο βασικός τελεστής ανάθεσης είναι ο "=". Η πρώτη σας σκέψη ίσως είναι ότι
    αυτό είναι το ίδιο με το "equal to". Αλλά δεν είναι. Αυτό που πραγματικά σημαίνει είναι
    ότι το αριστερό μέρος του τελεστή παίρνει την τιμή της έκφρασης στα
    δεξιά (δηλαδή, "αντίθεται το").
   </simpara>
   <para>
    Η τιμή μιας έκφρασης ανάθεσης είναι η τιμή που της ανατίθεται. Δηλαδή,
    η τιμή του "$a = 3" είναι 3. Αυτό σας επιτρέπει να κάνετε μερικά
    πράγματα: 
    <informalexample>
     <programlisting role="php"> 
<![CDATA[
$a = ($b = 4) + 5; // $a is equal to 9 now, and $b has been set to 4.
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Πέρα από το βασικό τελεστή ανάθεσης, υπάρχουν "σύνθετοι
    τελεστές" για όλους τους δυαδικούς αριθμητικούς και αλφαριθμητικούς τελεστές
    που σας επιτρέπουν να χρησιμοποιήσετε μια έκφραση και εν συνεχεία να θέσετε την
    τιμή στο αποτέλεσμα της έκφρασης. Για παράδειγμα:
    <informalexample>
     <programlisting role="php">
<![CDATA[
$a = 3;
$a += 5; // sets $a to 8, as if we had said: $a = $a + 5;
$b = "Hello ";
$b .= "There!"; // sets $b to "Hello There!", just like $b = $b . "There!";
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Σημειώστε ότι η ανάθεση αντιγράφει την αρχική μεταβλητή στην καινούρια
    (ανάθεση με τιμή), συνεπώς αλλαγές στο ένα δε θα επηρεάσουν
    το άλλο. Αυτό μπορεί επίσης να έχει σχέση αν χρειαστείνα αντιγράψετε κάτι
    όπως έναν μεγάλο πίνακα μέσα σε ένα στενό loop. Η PHP 4 υποστηρίζει την ανάθεση
    με αναφορά, χρησιμοποιώντας τη <computeroutput>$var =
    &amp;$othervar;</computeroutput> σύνταξη, αλλά αυτό δεν είναι δυνατό στην
    in PHP 3. 'Ανάθεση με αναφορά' σημαίνει πως και οι δυο μεταβλητές καταλήγουν
    στο να δείχνουν στα ίδια δεδομένα, και τίποτα δεν αντιγράφεται πουθενά. 
    Για να μάθετε περισσότερα για τις αναφορές, παρακαλώ διαβάστε το <link 
    linkend="language.references">Εξήγηση των αναφορών</link>.
   </para>
  </sect1>

  <sect1 id="language.operators.bitwise">
   <title>Τελεστές Bitwise</title>
   <simpara>
    Οι τελεστές Bitwise σας επιτρέπουν να μετατρέψετε συγκεκριμένα ενός ακεραίους
    να είναι on ή off. Αν και οι δυο αριστεροί και δεξιοί παράμετροι είναι
    strings, ο τελεστής bitwise θα ενεργήσει στους χαρακτήρες αυτού του
    string.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo 12 ^ 9; // Outputs '5'

    echo "12" ^ "9"; // Outputs the Backspace character (ascii 8)
                     // ('1' (ascii 49)) ^ ('9' (ascii 57)) = #8

    echo "hallo" ^ "hello"; // Outputs the ascii values #0 #4 #0 #0 #0
                            // 'a' ^ 'e' = #4
?>
]]>
     </programlisting>
    </informalexample> 
   </para>

   <table>
    <title>Τελεστές Bitwise</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Παράδειγμα</entry>
       <entry>Όνομα</entry>
       <entry>Αποτέλεσμα</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a &amp; $b</entry>
       <entry>And</entry>
       <entry>Τα Bits "σετάρονται" (are set) τόσο στο $a όσο και στο $b.</entry>
      </row>
      <row>
       <entry>$a | $b</entry>
       <entry>Or</entry>
       <entry>Τα Bits "σετάρονται" είτε στο $a είτε στο $b.</entry>
      </row>
      <row>
       <entry>$a ^ $b</entry>
       <entry>Xor</entry>
       <entry>
	  Τα Bits "σετάρονται" είτε στο $a είτε στο $b αλλά όχι και στα δυο.
       </entry>
      </row>
      <row>
       <entry>~ $a</entry>
       <entry>Not</entry>
       <entry>
	 Τα Bits που δεν "σετάρονται" στο $a, ή το αντίθετο.
       </entry>
      </row>
      <row>
       <entry>$a &lt;&lt; $b</entry>
       <entry>Shift left</entry>
       <entry>
	  Μετακίνηση (σιφτάρισμα) των bits του $a $b βημάτων στα αριστερά (κάθε βήμα σημαίνει
	"πολλαπλασιασμό επί δύο")
       </entry>
      </row>
      <row>
       <entry>$a &gt;&gt; $b</entry>
       <entry>Shift right</entry>
       <entry>
	Μετακίνηση (σιφτάρισμα) των bits του $a $b βημάτων στα δεξιά (κάθε βήμα σημαίνει
	"διαίρεση με το δύο")
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="language.operators.comparison">
   <title>Τελεστές σύγκρισης</title>
   <simpara>
    Οι τελεστές σύγκρισης, όπως λέει και το όνομα τους, σας επιτρέπουν να συγκρίνετε
    δυο τιμές.
   </simpara>
   <table>
    <title>Τελεστές Σύγκρισης</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Παράδειγμα</entry>
       <entry>Όνομα</entry>
       <entry>Αποτέλεσμα</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a == $b</entry>
       <entry>Ισότητα</entry>
       <entry>&true; αν το $a είναι ίσο με το $b.</entry>
      </row>
      <row>
       <entry>$a === $b</entry>
       <entry>Ομοιότητα</entry>
       <entry>
	&true; αν το $a είναι ίσο με το $b, και είναι του ίδιου
	τύπου. (Στην PHP 4 μόνο)
       </entry>
      </row>
      <row>
       <entry>$a != $b</entry>
       <entry>’νισα</entry>
       <entry>&true; αν το $a δεν είναι ίσο με το $b.</entry>
      </row>
      <row>
       <entry>$a &lt;&gt; $b</entry>
       <entry>Όχι ίσα</entry>
       <entry>&true; αν το $a δεν είναι ίσο με το $b.</entry>
      </row>
      <row>
       <entry>$a !== $b</entry>
       <entry>Ανόμοια</entry>
       <entry>
	&true; αν το $a δεν είναι ίσο με το $b, ή αν δεν είναι του ίδιου
	τύπου. (στην PHP 4 μόνο)
       </entry>
      </row>
      <row>
       <entry>$a &lt; $b</entry>
       <entry>Μικρότερο από</entry>
       <entry>&true; αν το $a είναι ακριβώς μικρότερο από το $b.</entry>
      </row>
      <row>
       <entry>$a &gt; $b</entry>
       <entry>Μεγαλύτερο από</entry>
       <entry>&true; αν το $a είναι αυστυρώς μεγαλύτερο από το $b.</entry>
      </row>
      <row>
       <entry>$a &lt;= $b</entry>
       <entry>Μικρότερο από ή ίσο με </entry>
       <entry>&true; αν το $a είναι μικρότερο από ή ίσο με το $b.</entry>
      </row>
      <row>
       <entry>$a &gt;= $b</entry>
       <entry>Μεγαλύτερο από ή ίσο με </entry>
       <entry>&true; αν το $a είναι μεγαλύτερο από ή ίσο με το $b.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Ακόμη ένας τελεστής υπόθεσης είναι ο "?:" (ή τριαδικός) τελεστής,
    ο οποίος λειτουργεί όπως και στη C και σε πολλές άλλες γλώσσες.
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
// Example usage for: Ternary Operator
$action = (empty($_POST['action'])) ? 'default' : $_POST['action'];

// The above is identical to this if/else statement
if (empty($_POST['action'])) {
    $action = 'default';
} else {
    $action = $_POST['action'];
}
?>
]]>
     </programlisting>
    </informalexample> 
    Η έκφραση <literal>(expr1) ? (expr2) : (expr3)</literal>
    παίρνει την τιμή <replaceable>expr2</replaceable> αν
    <replaceable>expr1</replaceable> γίνει &true;, και την
    <replaceable>expr3</replaceable> αν
    <replaceable>expr1</replaceable> γίνει &false;.
   </para>
   <para>
    Δείτε επίσης την <function>strcasecmp</function>,
    <function>strcmp</function>, και το τμήμα του εγχειριδίου σχετικά με τους
    <link linkend="language.types">Τύπους</link>.
   </para>
  </sect1>

  <sect1 id="language.operators.errorcontrol">
   <title>Τελεστές Ελέγχου Λαθών</title>
   <simpara>
    Η PHP υποστηρίζει έναν τελεστή ελέγχου λαθών: το σύμβολο (@). Όταν
    προηγείται σε μια έκφραση στην PHP, οποιοδήποτε μήνυμα λάθους που ίσως
    δημιουργηθεί από αυτή την έκφραση θα αγνοηθεί.
   </simpara>
   <simpara>
    Αν το χαρακτηριστικό των <link linkend="ini.track-errors">track_errors</link>
    έχει ενεργοποιηθεί, οποιοδήποτε μήνυμα λάθους που θα δημιουργηθεί από την έκφραση
    θα σωθεί στη μεταβλητή
    <link linkend="reserved.variables.phperrormsg">$php_errormsg</link>.
    Αυτή η μεταβλητή θα αλλάζει ανάλογα με κάθε λάθος, συνεπώς  θα πρέπει να την ελέγχετε συχνά
    αν θέλετε να τη χρησιμοποιείτε.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
/* Intentional file error */
$my_file = @file ('non_existent_file') or
    die ("Failed opening file: error was '$php_errormsg'");

// this works for any expression, not just functions:
$value = @$cache[$key]; 
// will not issue a notice if the index $key doesn't exist.

?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <simpara>
     Ο τελεστής @ δουλεύει μόνο στις
     <link linkend="language.expressions">εκφράσεις</link>. Ένας απλός κανόνας
     είναι ο εξής: αν μπορείτε να πάρετε την τιμή από κάτι, μπορείται να βάλετε
     ως πρόθεμα σ'αυτό, το @. Για παράδειγμα, μπορείτε να το προσθέσετε στις μεταβλητές,
     στις συναρτήσεις και στις κλήσεις του <function>include</function> , στις σταθερές
     κ.ο.κ. Δεν μπορείτε να το προσθέσετε στους ορισμούς συναρτήσεων ή κλάσεων,
     ή υποθετικών δομών όπως τις <literal>if</literal> και
     <literal>foreach</literal> κ.ο.κ.
    </simpara>
   </note>
   <simpara>
    Δείτε επίσης την <function>error_reporting</function> και το τμήμα του εγχειριδίου
    <link linkend="ref.errorfunc">Συναρτήσεις ελέγχου λαθών και σύνδεσης</link>.
   </simpara>
   <note>
    <para>
     Το πρόθεμα του τελεστή ελέγχου λαθών "@" δε θα αποτρέψει την εμφάνιση των μηνυμάτων
     που είναι αποτέλεσμα από λάθη μεταγλώττισης.
    </para>
   </note>
   <warning>
    <para>
     Προς το παρόν το πρόθεμα ελέγχου λαθών "@" θα αποτρέψει ακόμη και
     την αναφορά λαθών για κρίσιμα λάθη που θα τερματίσουν την εκτέλεση
     του κώδικα. Ανάμεσα σε άλλα, αυτό σημαίνει ότι αν χρησιμοποιείτε το "@" για
     να εξαφανίσετε τα λάθη από μια συγκεκριμένη συνάρτηση ή είτε δεν είναι διαθέσιμο ή
     δεν έχει γραφεί σωστά, το script θα σταματήσει αμέσως εκεί
     χωρίς κάποια ένδειξη για την αιτία.
    </para>
   </warning>
  </sect1>
  
  <sect1 id="language.operators.execution">
   <title>Τελεστές Εκτέλεσης</title>
   <para>
    Η PHP υποστηρίζει έναν τελεστή εκτέλεσης: backticks (``). Σημειώστε ότι
    αυτά δεν είναι μονά εισαγωγικά (single-quotes)! Η PHP θα προσπαθήσει να εκτελέσει
    το περιεχόμενο των backticks σαν εντολή shell. Το αποτέλεσμα θα επιστραφεί
    (π.χ., δε θα πεταχτεί απλά στην έξοδο, αλλά μπορεί να ανατεθεί
    σε μια μεταβλητή).  Η χρήση του backtick τελεστή είναι όμοια με τη
    <function>shell_exec</function>. 
    <informalexample>
     <programlisting role="php">
<![CDATA[
$output = `ls -al`;
echo "<pre>$output</pre>";
]]>
     </programlisting>
    </informalexample>
   </para>
   <note>
    <para>
     Ο backtick τελεστής είναι απενεργοποιημένος σε &safemode; είναι ενεργοποιημένος
     ή η <function>shell_exec</function> είναι απενεργοποιημένη.
    </para>
   </note>
   <para>
    Δείτε επίσης το τμήμα του εγχειριδίου <link linkend="ref.exec">Συναρτήσεις
    Εκτέλεσης Προγραμμάτων</link>, <function>popen</function>
    <function>proc_open</function>, και
    <link linkend="features.commandline">Χρησιμοποιώντας την PHP από
    commandline</link>.
   </para>
  </sect1>

  <sect1 id="language.operators.increment">
   <title>Τελεστές Αύξησης/Μειώσης</title>
   <para>
    Η PHP υποστηρίζει τελεστές πρό- και μετά- αύξησης όπως η C
    .
   </para>
   <table>
    <title>Τελεστές Αύξησης/Μειώσης</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Παράδειγμα</entry>
       <entry>Όνομα</entry>
       <entry>Αποτέλεσμα</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>++$a</entry>
       <entry>Προ-αύξηση</entry>
       <entry>Αυξάνει το $a κατά ένα και επιστρέφει το $a.</entry>
      </row>
      <row>
       <entry>$a++</entry>
       <entry>Μετά-αύξηση</entry>
       <entry>Επιστρέφει το $a, και μετά αυξάνει το $a κατά ένα.</entry>
      </row>
      <row>
       <entry>--$a</entry>
       <entry>Προ-μείωση</entry>
       <entry>Μειώνει το $a κατά ένα, και μετά επιστρέφει το $a.</entry>
      </row>
      <row>
       <entry>$a--</entry>
       <entry>Μετά-μείωση</entry>
       <entry>Επιστρέφει το $a, και μετά μειώνει το $a κατά ένα.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>
    Εδώ έχουμε ένα απλό παράδειγμα κώδικα:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
echo "<h3>Postincrement</h3>";
$a = 5;
echo "Should be 5: " . $a++ . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Preincrement</h3>";
$a = 5;
echo "Should be 6: " . ++$a . "<br />\n";
echo "Should be 6: " . $a . "<br />\n";

echo "<h3>Postdecrement</h3>";
$a = 5;
echo "Should be 5: " . $a-- . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";

echo "<h3>Predecrement</h3>";
$a = 5;
echo "Should be 4: " . --$a . "<br />\n";
echo "Should be 4: " . $a . "<br />\n";
?>
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Η PHP ακολουθεί τις συνθήκες της Perl όταν διαχειρίζεται αριθμητικές πράξεις
    σε μεταβλητές χαρακτήρων και όχι αυτές τις C.  Για παράδειγμα, στην Perl το 'Z'+1 επιστρέφει
    'AA', ενώ στη C το 'Z'+1 επιστρέφει '[' ( ord('Z') == 90, ord('[') == 91 ).
    Σημειώστε ότι οι μεταβλητές χαρακτήρων μπορούν να αυξηθούν αλλά όχι να μειωθούν.
    <example>
     <title>Αριθμητικές Πράξεις σε Μεταβλητές Χαρακτήρων</title>
     <programlisting role="php">
<![CDATA[
<?php
$i = 'W';
for($n=0; $n<6; $n++)
  echo ++$i . "\n";

/*
  Produces the output similar to the following:

X
Y
Z
AA
AB
AC

*/
?>
]]>
     </programlisting>
    </example>
   </para>
  </sect1>

  <sect1 id="language.operators.logical">
   <title>Λογικοί Τελεστές</title>

   <table>
    <title>Λογικοί Τελεστές</title>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>Παράδειγμα</entry>
       <entry>Όνομα</entry>
       <entry>Αποτέλεσμα</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>$a and $b</entry>
       <entry>And</entry>
       <entry>&true; αν και το $a και το $b είναι &true;.</entry>
      </row>
      <row>
       <entry>$a or $b</entry>
       <entry>Or</entry>
       <entry>&true; αν είτε το $a είτε το $b είναι &true;.</entry>
      </row>
      <row>
       <entry>$a xor $b</entry>
       <entry>Xor</entry>
       <entry>&true; αν είτε το $a είτε το $b είναι &true;, αλλά όχι και τα δυο.</entry>
      </row>
      <row>
       <entry>! $a</entry>
       <entry>Not</entry>
       <entry>&true; αν το $a δεν είναι &true;.</entry>
      </row>
      <row>
       <entry>$a &amp;&amp; $b</entry>
       <entry>And</entry>
       <entry>&true; αν και το $a και το $b είναι &true;.</entry>
      </row>
      <row>
       <entry>$a || $b</entry>
       <entry>Or</entry>
       <entry>&true; αν είτε το $a είτε το $b είναι &true;.</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <simpara>
    Ο λόγος για τις δυο διαφορετικές μορφές των "and" και των "or"
    τελεστών είναι ότι λειτουργούν με διαφορετικές προτεραιότητες. (Βλέπε
    <link linkend="language.operators.precedence">Προτεραιότητα
    Τελεστών</link>.)
   </simpara>
  </sect1>

  <sect1 id="language.operators.string">
   <title>Τελεστές Αλφαριθμητικών (String)</title>
   <simpara>
    Υπάρχουν δύο τελεστές <type>string</type>. Ο πρώτος είναι ο
    τελεστής σύνδεσης ('.'), ο οποίος επιστρέφει τη σύνδεση των
    αριστερών και των δεξιών παραμέτρων. Ο δεύτερος είναι ο τελεστής ανάθεσης
    σύνδεσης ('.='), ο οποίος προσθέτει την παράμετρο της δεξιά πλευρά στην
    παράμετρο της αριστερής πλευράς. Παρακαλώ διαβάστε την<link
    linkend="language.operators.assignment">Ανάθεση
    Τελεστών</link> για περισσότερες πληροφορίες.
   </simpara>

   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
$a = "Hello ";
$b = $a . "World!"; // now $b contains "Hello World!"

$a = "Hello ";
$a .= "World!";     // now $a contains "Hello World!"
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Δείτε επίσης το τμήμα του εγχειριδίου για τους 
    <link linkend="language.types.string">Τύπους Αλφαριθμητικών</link> και για τις
    <link linkend="ref.strings">Συναρτήσεις Αλφαριθμητικών</link>.
   </para>
  </sect1>
  
  <sect1 id="language.operators.array">
   <title>Τελεστές Πινάκων</title>
   <simpara>
    Ο μόνος τελεστής πίνακα στην PHP είναι ο <literal>+</literal> τελεστής.
    Αυτός προσθέτει τη δεξιά μεριά του πίνακα στην αριστερή μεριά, ενώ
    τα διπλα κλειδιά ΔΕΝ παραβλέπονται.
   </simpara>
   <para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
$a = array("a" => "apple", "b" => "banana");
$b = array("a" =>"pear", "b" => "strawberry", "c" => "cherry");

$c = $a + $b;

var_dump($c);
]]>
     </programlisting>
    </informalexample>
    Όταν εκτελεστεί, το script θα εκτυπώσει τα ακόλουθα:
    <screen role="php">
<![CDATA[
array(3) {
  ["a"]=>
  string(5) "apple"
  ["b"]=>
  string(6) "banana"
  ["c"]=>
  string(6) "cherry"
}

]]>
    </screen>
   </para>
   <para>
    Δείτε επίσης το τμήμα του εγχειριδίου για τους
    <link linkend="language.types.array">Τύπους Πινάκων</link> και για τις
    <link linkend="ref.array">Συναρτήσεις Πινάκων</link>.
   </para>
  </sect1>
 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
