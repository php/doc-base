<?xml version="1.0" encoding="utf-8"?>
<!-- This file was generated by weave.xsl version 1.0. Do not edit! -->
<!-- See http://sourceforge.net/projects/docbook/ -->
<!DOCTYPE book
  PUBLIC "-//DocBook Open Repository//DTD DocBook Literate Programming V0.0//EN" "http://docbook.sourceforge.net/release/litprog/current/dtd/ldocbook.dtd">
<book xmlns:src="http://nwalsh.com/xmlns/litprog/fragment" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<bookinfo>
<title>HTML Parameter Reference</title>
<releaseinfo role="meta">
$Id: param.xml,v 1.2 2003-03-09 14:56:38 tom Exp $
</releaseinfo>
<author>
  <surname>Walsh</surname>
  <firstname>Norman</firstname>
</author>
<copyright>
  <year>1999</year>
  <year>2000</year>
  <year>2001</year>
  <holder>Norman Walsh</holder>
</copyright>
</bookinfo>

<preface><title>Introduction</title>

<para>This is technical reference documentation for the DocBook XSL
Stylesheets; it documents (some of) the parameters, templates, and
other elements of the stylesheets.</para>

<para>This reference describes each of the HTML Stylesheet parameters.
These are the <quote>easily customizable</quote> parts of the stylesheet.
If you want to specify an alternate value for one or more of these
parameters, you can do so in a <quote>driver</quote> stylesheet.</para>

<para>For example, if you want to change the <literal moreinfo="none">html.stylesheet</literal>
to <filename moreinfo="none">reference.css</filename>, you might create a driver
stylesheet like this:</para>

<programlisting format="linespecific">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version='1.0'&gt;

  &lt;xsl:import href="http://docbook.sourceforge.net/release/xsl/snapshot/html/docbook.xsl"/&gt;

  &lt;xsl:param name="html.stylesheet"&gt;reference.css&lt;/xsl:param&gt;

&lt;/xsl:stylesheet&gt;</programlisting>

<para>Naturally, you have to change the
<sgmltag class="attribute">href</sgmltag> attribute on
<literal moreinfo="none">&lt;xsl:import&gt;</literal> to point to
<filename moreinfo="none">docbook.xsl</filename> on your system. (Or
<filename moreinfo="none">chunk.xsl</filename>, if you're using chunking.)</para>

<para>This is not intended to be <quote>user</quote> documentation.
It is provided for developers writing customization layers for the
stylesheets, and for anyone who's interested in <quote>how it
works</quote>.</para>

<para>Although I am trying to be thorough, this documentation is known
to be incomplete. Don't forget to read the source, too :-)</para>
</preface>

<reference><title>Admonitions</title>
<refentry id="admon.graphics.extension">
<refmeta>
<refentrytitle>admon.graphics.extension</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics.extension</refname>
<refpurpose>Extension for admonition graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="admon.graphics.extension.frag">&lt;xsl:param name="admon.graphics.extension"
           select="'.png'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Sets the extension to use on admonition graphics.</para>

</refsect1>
</refentry>

<refentry id="admon.graphics.path">
<refmeta>
<refentrytitle>admon.graphics.path</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics.path</refname>
<refpurpose>Path to admonition graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="admon.graphics.path.frag">&lt;xsl:param name="admon.graphics.path"&gt;images/&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Sets the path, probably relative to the directory where the HTML
files are created, to the admonition graphics.
</para>

</refsect1>
</refentry>

<refentry id="admon.graphics">
<refmeta>
<refentrytitle>admon.graphics</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.graphics</refname>
<refpurpose>Use graphics in admonitions?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="admon.graphics.frag">&lt;xsl:param name="admon.graphics"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), admonitions are presented in an alternate style that uses
a graphic.  Default graphics are provided in the distribution.
</para>

</refsect1>
</refentry>

<refentry id="admon.style">
<refmeta>
<refentrytitle>admon.style</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>admon.style</refname>
<refpurpose>CSS style attributes for admonitions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="admon.style.frag">&lt;xsl:param name="admon.style"&gt;
  &lt;xsl:text&gt;margin-left: 0.5in; margin-right: 0.5in;&lt;/xsl:text&gt;
&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Specifies the value of the <sgmltag class="attribute">STYLE</sgmltag>
attribute that should be added to admonitions.
</para>

</refsect1>
</refentry>

</reference>

<reference><title>Callouts</title>
<refentry id="callout.defaultcolumn">
<refmeta>
<refentrytitle>callout.defaultcolumn</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.defaultcolumn</refname>
<refpurpose>Indicates what column callouts appear in by default</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.defaultcolumn.frag">&lt;xsl:param name="callout.defaultcolumn"
           select="'60'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If a callout does not identify a column (for example, if it uses
the <literal moreinfo="none">linerange</literal> <sgmltag class="attribute">unit</sgmltag>),
it will appear in the default column.
</para>

</refsect1>
</refentry>

<refentry id="callout.graphics.extension">
<refmeta>
<refentrytitle>callout.graphics.extension</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.extension</refname>
<refpurpose>Extension for callout graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.graphics.extension.frag">&lt;xsl:param name="callout.graphics.extension"
           select="'.png'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Sets the extension to use on callout graphics.</para>

</refsect1>
</refentry>

<refentry id="callout.graphics.number.limit">
<refmeta>
<refentrytitle>callout.graphics.number.limit</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.number.limit</refname>
<refpurpose>Number of the largest callout graphic</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.graphics.number.limit.frag">&lt;xsl:param name="callout.graphics.number.limit"
           select="'10'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">callout.graphics</parameter>
is non-zero, graphics are used to represent
callout numbers. The value of
<parameter moreinfo="none">callout.graphics.number.limit</parameter>
is
the largest number for which a graphic exists. If the callout number
exceeds this limit, the default presentation "(nnn)" will always
be used.
</para>

</refsect1>
</refentry>

<refentry id="callout.graphics.path">
<refmeta>
<refentrytitle>callout.graphics.path</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics.path</refname>
<refpurpose>Path to callout graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.graphics.path.frag">&lt;xsl:param name="callout.graphics.path"
           select="'images/callouts/'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Sets the path, probably relative to the directory where the HTML
files are created, to the callout graphics.
</para>

</refsect1>
</refentry>

<refentry id="callout.graphics">
<refmeta>
<refentrytitle>callout.graphics</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.graphics</refname>
<refpurpose>Use graphics for callouts?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.graphics.frag">&lt;xsl:param name="callout.graphics"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, callouts are presented with graphics (e.g., reverse-video
circled numbers instead of "(1)", "(2)", etc.).
Default graphics are provided in the distribution.
</para>

</refsect1>
</refentry>

<refentry id="callout.list.table">
<refmeta>
<refentrytitle>callout.list.table</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.list.table</refname>
<refpurpose>Present callout lists using a table?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.list.table.frag">&lt;xsl:param name="callout.list.table"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The default presentation of <sgmltag>CalloutList</sgmltag>s uses
an HTML <sgmltag>DL</sgmltag>. Some browsers don't align DLs very well
if <parameter moreinfo="none">callout.graphics</parameter> are used. With this option
turned on, <sgmltag>CalloutList</sgmltag>s are presented in an HTML
<sgmltag>TABLE</sgmltag>, which usually results in better alignment
of the callout number with the callout description.</para>

</refsect1>
</refentry>

<refentry id="callout.unicode.number.limit">
<refmeta>
<refentrytitle>callout.unicode.number.limit</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode.number.limit</refname>
<refpurpose>Number of the largest callout graphic</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.unicode.number.limit.frag">&lt;xsl:param name="callout.unicode.number.limit"
           select="'10'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">callout.unicode</parameter>
is non-zero, unicode characters are used to represent
callout numbers. The value of
<parameter moreinfo="none">callout.unicode.number.limit</parameter>
is
the largest number for which a unicode character exists. If the callout number
exceeds this limit, the default presentation "(nnn)" will always
be used.
</para>

</refsect1>
</refentry>

<refentry id="callout.unicode.start.character">
<refmeta>
<refentrytitle>callout.unicode.start.character</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode.start.character</refname>
<refpurpose>First Unicode character to use, decimal value.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.unicode.start.character.frag">&lt;xsl:param name="callout.unicode.start.character"
           select="10102"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">callout.graphics</parameter> is zero and <parameter moreinfo="none">callout.unicode</parameter>
is non-zero, unicode characters are used to represent
callout numbers. The value of
<parameter moreinfo="none">callout.unicode.start.character</parameter>
is the decimal unicode value used for callout number one. Currently, 
only 10102 is supported in the stylesheets for this parameter. 
</para>

</refsect1>
</refentry>

<refentry id="callout.unicode">
<refmeta>
<refentrytitle>callout.unicode</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callout.unicode</refname>
<refpurpose>Use Unicode characters rather than images for callouts.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callout.unicode.frag">&lt;xsl:param name="callout.unicode"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The stylesheets can use either an image of the numbers one to ten, or the single Unicode character which represents the numeral, in white on a black background. Use this to select the Unicode character option.
</para>

</refsect1>
</refentry>

<refentry id="callouts.extension">
<refmeta>
<refentrytitle>callouts.extension</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>callouts.extension</refname>
<refpurpose>Enable the callout extension</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="callouts.extension.frag">&lt;xsl:param name="callouts.extension"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The callouts extension processes <sgmltag>areaset</sgmltag>
elements in <sgmltag>ProgramListingCO</sgmltag> and other text-based
callout elements.
</para>

</refsect1>
</refentry>

</reference>

<reference><title>EBNF</title>
<refentry id="ebnf.table.bgcolor">
<refmeta>
<refentrytitle>ebnf.table.bgcolor</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ebnf.table.bgcolor</refname>
<refpurpose>Background color for EBNF tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="ebnf.table.bgcolor.frag">&lt;xsl:param name="ebnf.table.bgcolor"
           select="'#F5DCB3'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Sets the background color for EBNF tables. No <sgmltag>bgcolor</sgmltag>
attribute is output if <varname>ebnf.table.bgcolor</varname> is set to
the null string. The default value matches the value used in recent
online versions of the W3C's XML Spec productions.</para>

</refsect1>
</refentry>

<refentry id="ebnf.table.border">
<refmeta>
<refentrytitle>ebnf.table.border</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>ebnf.table.border</refname>
<refpurpose>Selects border on EBNF tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="ebnf.table.border.frag">&lt;xsl:param name="ebnf.table.border"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Selects the border on EBNF tables. If non-zero, the tables have
borders, otherwise they don't.</para>

</refsect1>
</refentry>

</reference>

<reference><title>ToC/LoT/Index Generation</title>
<refentry id="annotate.toc">
<refmeta>
<refentrytitle>annotate.toc</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>annotate.toc</refname>
<refpurpose>Annotate the Table of Contents?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="annotate.toc.frag">&lt;xsl:param name="annotate.toc"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, TOCs will be annotated. At present, this just means
that the <sgmltag>RefPurpose</sgmltag> of <sgmltag>RefEntry</sgmltag>
TOC entries will be displayed.
</para>

</refsect1>
</refentry>

<refentry id="autotoc.label.separator">
<refmeta>
<refentrytitle>autotoc.label.separator</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>autotoc.label.separator</refname>
<refpurpose>Separator between labels and titles in the ToC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="autotoc.label.separator.frag">&lt;xsl:param name="autotoc.label.separator"
           select="'. '"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>String to use to seperate labels and title in a table of contents.</para>

</refsect1>
</refentry>

<refentry id="process.source.toc">
<refmeta>
<refentrytitle>process.source.toc</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>process.source.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="process.source.toc.frag">&lt;xsl:param name="process.source.toc"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:
</para>

</refsect1>
</refentry>

<refentry id="process.empty.source.toc">
<refmeta>
<refentrytitle>process.empty.source.toc</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>process.empty.source.toc</refname>
<refpurpose>FIXME:</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="process.empty.source.toc.frag">&lt;xsl:param name="process.empty.source.toc"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:
</para>

</refsect1>
</refentry>

<refentry id="bridgehead.in.toc">
<refmeta>
<refentrytitle>bridgehead.in.toc</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bridgehead.in.toc</refname>
<refpurpose>Should bridgehead elements appear in the TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="bridgehead.in.toc.frag">&lt;xsl:param name="bridgehead.in.toc"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, bridgeheads appear in the TOC. Note that this option
is not fully supported and may be removed in a future version of the
stylesheets.
</para>

</refsect1>
</refentry>

<refentry id="manual.toc">
<refmeta>
<refentrytitle>manual.toc</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>manual.toc</refname>
<refpurpose>An explicit TOC to be used for the TOC</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="manual.toc.frag">&lt;xsl:param name="manual.toc"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The <parameter moreinfo="none">manual.toc</parameter> identifies an explicit TOC that
will be used for building the printed TOC.
</para>

</refsect1>
</refentry>

<refentry id="toc.list.type">
<refmeta>
<refentrytitle>toc.list.type</refentrytitle>
<refmiscinfo role="type">list</refmiscinfo>
<refmiscinfo role="value">dl</refmiscinfo>
<refmiscinfo role="value">ul</refmiscinfo>
<refmiscinfo role="value">ol</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.list.type</refname>
<refpurpose>Type of HTML list element to use for Tables of Contents</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="toc.list.type.frag">&lt;xsl:param name="toc.list.type"&gt;dl&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>When an automatically generated Table of Contents (or List of Titles)
is produced, this HTML element will be used to make the list.
</para>

</refsect1>
</refentry>

<refentry id="toc.section.depth">
<refmeta>
<refentrytitle>toc.section.depth</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>toc.section.depth</refname>
<refpurpose>How deep should recursive <sgmltag>section</sgmltag>s appear
in the TOC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="toc.section.depth.frag">&lt;xsl:param name="toc.section.depth"&gt;2&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Specifies the depth to which recursive sections should appear in the
TOC.
</para>

</refsect1>
</refentry>

<refentry id="generate.toc">
<refmeta>
<refentrytitle>generate.toc</refentrytitle>
<refmiscinfo role="type">table</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.toc</refname>
<refpurpose>Control generation of ToCs and LoTs</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="generate.toc.frag">&lt;xsl:param name="generate.toc"&gt;
appendix  toc,title
article/appendix  nop
article   toc,title
book      toc,title,figure,table,example,equation
chapter   toc,title
part      toc,title
preface   toc,title
qandadiv  toc
qandaset  toc
reference toc,title
sect1     toc
sect2     toc
sect3     toc
sect4     toc
sect5     toc
section   toc
set       toc,title
&lt;/xsl:param&gt;
</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter has a structured value. It is a table of space-delimited
path/value pairs. Each path identifies some element in the source document
using a restricted subset of XPath (only the implicit child axis, no wildcards,
no predicates). Paths can be either relative or absolute.</para>

<para>When processing a particular element, the stylesheets consult this table to
determine if a ToC (or LoT(s)) should be generated.</para>

<para>For example, consider the entry:</para>

<screen format="linespecific">book toc,figure</screen>

<para>This indicates that whenever a <sgmltag>book</sgmltag> is formatted, a
Table Of Contents and a List of Figures should be generated. Similarly,</para>

<screen format="linespecific">/chapter toc</screen>

<para>indicates that whenever a document <emphasis>that has a root
of</emphasis> <sgmltag>chapter</sgmltag> is formatted, a Table of
Contents should be generated. The entry <literal moreinfo="none">chapter</literal> would match
all chapters, but <literal moreinfo="none">/chapter</literal> matches only <sgmltag>chapter</sgmltag>
document elements.</para>

<para>Generally, the longest match wins. So, for example, if you want to distinguish
articles in books from articles in parts, you could use these two entries:</para>

<screen format="linespecific">book/article toc,figure
part/article toc</screen>

<para>Note that an article in a part can never match a <literal moreinfo="none">book/article</literal>,
so if you want nothing to be generated for articles in parts, you can simply leave
that rule out.</para>

<para>If you want to leave the rule in, to make it explicit that you're turning
something off, use the value <quote>nop</quote>. For example, the following
entry disables ToCs and LoTs for articles:</para>

<screen format="linespecific">article nop</screen>

<para>Do not simply leave the word <quote>article</quote> in the file
without a matching value. That'd be just begging the silly little
path/value parser to get confused.</para>

<para>Section ToCs are further controlled by the
<parameter moreinfo="none">generate.section.toc.level</parameter> parameter.
For a given section level to have a ToC, it must have both an entry in 
<parameter moreinfo="none">generate.toc</parameter> and be within the range enabled by
<parameter moreinfo="none">generate.section.toc.level</parameter>.</para>
</refsect1>
</refentry>

<refentry id="generate.section.toc.level">
<refmeta>
<refentrytitle>generate.section.toc.level</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.section.toc.level</refname>
<refpurpose>Control depth of TOC generation in sections</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="generate.section.toc.level.frag">&lt;xsl:param name="generate.section.toc.level"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The <parameter moreinfo="none">generate.section.toc.level</parameter> parameter
controls the depth of section in which TOCs will be generated. Note
that this is related to, but not the same as
<parameter moreinfo="none">toc.section.depth</parameter>, which controls the depth to
which TOC entries will be generated in a given TOC.</para>
<para>If, for example, <parameter moreinfo="none">generate.section.toc.level</parameter>
is <literal moreinfo="none">3</literal>, TOCs will be generated in first, second, and third
level sections, but not in fourth level sections.
</para>

</refsect1>
</refentry>

<refentry id="generate.index">
<refmeta>
<refentrytitle>generate.index</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.index</refname>
<refpurpose>Do you want an index?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="generate.index.frag">&lt;xsl:param name="generate.index"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Specify if an index should be generated. </para>

</refsect1>
</refentry>

</reference>

<reference><title>Extensions</title>
<refentry id="linenumbering.everyNth">
<refmeta>
<refentrytitle>linenumbering.everyNth</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.everyNth</refname>
<refpurpose>Indicate which lines should be numbered</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="linenumbering.everyNth.frag">&lt;xsl:param name="linenumbering.everyNth"
           select="'5'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If line numbering is enabled, everyNth line will be numbered.
</para>

</refsect1>
</refentry>

<refentry id="linenumbering.extension">
<refmeta>
<refentrytitle>linenumbering.extension</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.extension</refname>
<refpurpose>Enable the line numbering extension</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="linenumbering.extension.frag">&lt;xsl:param name="linenumbering.extension"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, verbatim environments (elements that have the
format='linespecific' notation attribute: address, literallayout,
programlisting, screen, synopsis) that specify line numbering will
have, surprise, line numbers.
</para>

</refsect1>
</refentry>

<refentry id="linenumbering.separator">
<refmeta>
<refentrytitle>linenumbering.separator</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.separator</refname>
<refpurpose>Specify a separator between line numbers and lines</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="linenumbering.separator.frag">&lt;xsl:param name="linenumbering.separator"
           select="' '"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The separator is inserted between line numbers and lines in
the verbatim environment.
</para>

</refsect1>
</refentry>

<refentry id="linenumbering.width">
<refmeta>
<refentrytitle>linenumbering.width</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>linenumbering.width</refname>
<refpurpose>Indicates the width of line numbers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="linenumbering.width.frag">&lt;xsl:param name="linenumbering.width"
           select="'3'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If line numbering is enabled, line numbers will appear right
justified in a field "width" characters wide.
</para>

</refsect1>
</refentry>

<refentry id="tablecolumns.extension">
<refmeta>
<refentrytitle>tablecolumns.extension</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tablecolumns.extension</refname>
<refpurpose>Enable the table columns extension function</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="tablecolumns.extension.frag">&lt;xsl:param name="tablecolumns.extension"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The table columns extension function adjusts the widths of table
columns in the HTML result to more accurately reflect the specifications
in the CALS table.
</para>

</refsect1>
</refentry>

<refentry id="textinsert.extension">
<refmeta>
<refentrytitle>textinsert.extension</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>textinsert.extension</refname>
<refpurpose>Enable the textinsert extension element</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="textinsert.extension.frag">&lt;xsl:param name="textinsert.extension"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The textinsert extension element inserts the contents of a
a file into the result tree (as text).
</para>

</refsect1>
</refentry>

<refentry id="graphicsize.extension">
<refmeta>
<refentrytitle>graphicsize.extension</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>graphicsize.extension</refname>
<refpurpose>Enable the getWidth()/getDepth() extension functions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="graphicsize.extension.frag">&lt;xsl:param name="graphicsize.extension"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero (and if <parameter moreinfo="none">use.extensions</parameter> is non-zero
and if you're using a processor that supports extension functions), the
<function moreinfo="none">getWidth</function> and <function moreinfo="none">getDepth</function> functions
will be used to extract image sizes from graphics.</para>

</refsect1>
</refentry>

<refentry id="use.extensions">
<refmeta>
<refentrytitle>use.extensions</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.extensions</refname>
<refpurpose>Enable extensions</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="use.extensions.frag">&lt;xsl:param name="use.extensions"
           select="'0'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, extensions may be used. Each extension is
further controlled by its own parameter. But if
<parameter moreinfo="none">use.extensions</parameter> is zero, no extensions will
be used.
</para>

</refsect1>
</refentry>

</reference>

<reference><title>Automatic labelling</title>
<refentry id="chapter.autolabel">
<refmeta>
<refentrytitle>chapter.autolabel</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chapter.autolabel</refname>
<refpurpose>Are chapters automatically enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="chapter.autolabel.frag">&lt;xsl:param name="chapter.autolabel"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), unlabeled chapters will be enumerated.
</para>

</refsect1>
</refentry>

<refentry id="appendix.autolabel">
<refmeta>
<refentrytitle>appendix.autolabel</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>appendix.autolabel</refname>
<refpurpose>Are Appendixes automatically enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="appendix.autolabel.frag">&lt;xsl:param name="appendix.autolabel"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), unlabeled appendixes will be
enumerated.
</para>

</refsect1>
</refentry>

<refentry id="part.autolabel">
<refmeta>
<refentrytitle>part.autolabel</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>part.autolabel</refname>
<refpurpose>Are parts and references enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="part.autolabel.frag">&lt;xsl:param name="part.autolabel"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), unlabeled parts and references will be enumerated.
</para>

</refsect1>
</refentry>

<refentry id="preface.autolabel">
<refmeta>
<refentrytitle>preface.autolabel</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>preface.autolabel</refname>
<refpurpose>Are prefaces enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="preface.autolabel.frag">&lt;xsl:param name="preface.autolabel"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), unlabeled prefaces will be enumerated.
</para>

</refsect1>
</refentry>

<refentry id="qandadiv.autolabel">
<refmeta>
<refentrytitle>qandadiv.autolabel</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qandadiv.autolabel</refname>
<refpurpose>Are divisions in QAndASets enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="qandadiv.autolabel.frag">&lt;xsl:param name="qandadiv.autolabel"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), unlabeled qandadivs will be enumerated.
</para>

</refsect1>
</refentry>

<refentry id="section.autolabel">
<refmeta>
<refentrytitle>section.autolabel</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.autolabel</refname>
<refpurpose>Are sections enumerated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="section.autolabel.frag">&lt;xsl:param name="section.autolabel"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), unlabeled sections will be enumerated.
</para>

</refsect1>
</refentry>

<refentry id="section.label.includes.component.label">
<refmeta>
<refentrytitle>section.label.includes.component.label</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>section.label.includes.component.label</refname>
<refpurpose>Do section labels include the component label?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="section.label.includes.component.label.frag">&lt;xsl:param name="section.label.includes.component.label"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), section labels are prefixed with the label of the
component that contains them.
</para>

</refsect1>
</refentry>

<refentry id="label.from.part">
<refmeta>
<refentrytitle>label.from.part</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>label.from.part</refname>
<refpurpose>Renumber chapters in each part?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="label.from.part.frag">&lt;xsl:param name="label.from.part"
           select="'0'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">label.from.part</parameter> is non-zero, components
(<sgmltag>chapter</sgmltag>s, <sgmltag>appendixe</sgmltag>s, etc.)
will be numbered from 1 in each <sgmltag>part</sgmltag>. Otherwise,
they will be numbered monotonically throughout each
<sgmltag>book</sgmltag>.
</para>

</refsect1>
</refentry>

</reference>

<!--
<reference><title></title>
</reference>
-->

<reference><title>HTML</title>
<refentry id="html.base">
<refmeta>
<refentrytitle>html.base</refentrytitle>
<refmiscinfo role="type">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.base</refname>
<refpurpose>An HTML base URI</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.base.frag">&lt;xsl:param name="html.base"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If html.base is set, it is used for the <sgmltag>BASE</sgmltag>
element in the <sgmltag>HEAD</sgmltag> of the HTML documents.
This is useful for dynamically served HTML where the base URI needs
to be shifted.</para>

</refsect1>
</refentry>

<refentry id="html.stylesheet.type">
<refmeta>
<refentrytitle>html.stylesheet.type</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.stylesheet.type</refname>
<refpurpose>The type of the stylesheet used in the generated HTML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.stylesheet.type.frag">&lt;xsl:param name="html.stylesheet.type"&gt;text/css&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The type of the stylesheet to place in the HTML <sgmltag>link</sgmltag> tag.
</para>

</refsect1>
</refentry>

<refentry id="html.stylesheet">
<refmeta>
<refentrytitle>html.stylesheet</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.stylesheet</refname>
<refpurpose>Name of the stylesheet(s) to use in the generated HTML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.stylesheet.frag">&lt;xsl:param name="html.stylesheet"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The <parameter moreinfo="none">html.stylesheet</parameter> parameter is either empty,
indicating that no stylesheet <sgmltag>LINK</sgmltag> tag should be generated
in the HTML output, or it is a list of one or more stylesheets.</para>

<para>Multiple stylesheets are space-delimited. If you need to
reference a stylesheet URI that includes a space, encode it with
<literal moreinfo="none">%20</literal>. A seprate HTML <sgmltag>LINK</sgmltag> element will
be generated for each stylesheet in the order they are listed in the
parameter.</para>

</refsect1>
</refentry>

<refentry id="use.id.as.filename">
<refmeta>
<refentrytitle>use.id.as.filename</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.id.as.filename</refname>
<refpurpose>Use ID value of chunk elements as the filename?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="use.id.as.filename.frag">&lt;xsl:param name="use.id.as.filename"
           select="'0'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">use.id.as.filename</parameter>
is non-zero, the filename of chunk elements that have IDs will be
derived from the ID value.
</para>

</refsect1>
</refentry>

<refentry id="css.decoration">
<refmeta>
<refentrytitle>css.decoration</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>css.decoration</refname>
<refpurpose>Enable CSS decoration of elements</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="css.decoration.frag">&lt;xsl:param name="css.decoration"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>
If <literal moreinfo="none">css.decoration</literal> is turned on, then HTML elements
produced by the
stylesheet may be decorated with STYLE attributes.  For example, the
LI tags produced for list items may include a fragment of CSS in the
STYLE attribute which sets the CSS property "list-style-type".
</para>

</refsect1>
</refentry>

<refentry id="spacing.paras">
<refmeta>
<refentrytitle>spacing.paras</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>spacing.paras</refname>
<refpurpose>Insert additional &lt;p&gt; elements for spacing?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="spacing.paras.frag">&lt;xsl:param name="spacing.paras"
           select="'0'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>When non-zero, additional, empty paragraphs are inserted in
several contexts (for example, around informal figures), to create a
more pleasing visual appearance in many browsers.
</para>

</refsect1>
</refentry>

<refentry id="emphasis.propagates.style">
<refmeta>
<refentrytitle>emphasis.propagates.style</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>emphasis.propagates.style</refname>
<refpurpose>Pass emphasis role attribute through to HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="emphasis.propagates.style.frag">&lt;xsl:param name="emphasis.propagates.style"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, the role attribute of <sgmltag>emphasis</sgmltag> elements
will be passed through to the HTML as a class attribute on a
<sgmltag>span</sgmltag> that surrounds the emphasis.</para>

</refsect1>
</refentry>

<refentry id="para.propagates.style">
<refmeta>
<refentrytitle>para.propagates.style</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>para.propagates.style</refname>
<refpurpose>Pass para role attribute through to HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="para.propagates.style.frag">&lt;xsl:param name="para.propagates.style"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, the role attribute of <sgmltag>para</sgmltag> elements
will be passed through to the HTML as a class attribute on the
<sgmltag>p</sgmltag> generated for the paragraph.</para>

</refsect1>
</refentry>

<refentry id="phrase.propagates.style">
<refmeta>
<refentrytitle>phrase.propagates.style</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>phrase.propagates.style</refname>
<refpurpose>Pass phrase role attribute through to HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="phrase.propagates.style.frag">&lt;xsl:param name="phrase.propagates.style"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, the role attribute of <sgmltag>phrase</sgmltag> elements
will be passed through to the HTML as a class attribute on a
<sgmltag>span</sgmltag> that surrounds the phrase.</para>

</refsect1>
</refentry>

<refentry id="entry.propagates.style">
<refmeta>
<refentrytitle>entry.propagates.style</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>entry.propagates.style</refname>
<refpurpose>Pass entry role attribute through to HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="entry.propagates.style.frag">&lt;xsl:param name="entry.propagates.style"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, the role attribute of <sgmltag>entry</sgmltag> elements
will be passed through to the HTML as a class attribute on the
<sgmltag>td</sgmltag> or <sgmltag>th</sgmltag> generated for the table
cell.</para>

</refsect1>
</refentry>

<refentry id="html.longdesc">
<refmeta>
<refentrytitle>html.longdesc</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.longdesc</refname>
<refpurpose>Should longdesc URIs be created?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.longdesc.frag">&lt;xsl:param name="html.longdesc"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, HTML files will be created for the
<sgmltag class="attribute">longdesc</sgmltag> attribute. These files
are created from the <sgmltag>textobject</sgmltag>s in
<sgmltag>mediaobject</sgmltag>s and
<sgmltag>inlinemediaobject</sgmltag>.
</para>

</refsect1>
</refentry>

<refentry id="html.longdesc.link">
<refmeta>
<refentrytitle>html.longdesc.link</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.longdesc.link</refname>
<refpurpose>Should a link to the longdesc be included in the HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.longdesc.link.frag">&lt;xsl:param name="html.longdesc.link"
           select="$html.longdesc"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, links will be created to the
HTML files created for the
<sgmltag class="attribute">longdesc</sgmltag> attribute. It makes no
sense to turn enable this option without also enabling the
<parameter moreinfo="none">$html.longdesc</parameter> parameter.</para>

<para>The <literal moreinfo="none">longdesc.link</literal> named template is called
to construct the link.</para>

</refsect1>
</refentry>

<refentry id="make.valid.html">
<refmeta>
<refentrytitle>make.valid.html</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.valid.html</refname>
<refpurpose>Attempt to make sure the HTML output is valid HTML</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="make.valid.html.frag">&lt;xsl:param name="make.valid.html"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">make.valid.html</parameter> is true, the stylesheets take
extra effort to ensure that the resulting HTML is valid. This may mean that some
<sgmltag>para</sgmltag> tags are translated into HTML <sgmltag>div</sgmltag>s or
that other substitutions occur.</para>

<para>This parameter is different from <parameter moreinfo="none">html.cleanup</parameter>
because it changes the resulting markup; it does not use extension functions
to manipulate result-tree-fragments and is therefore applicable to any
XSLT processor.</para>

</refsect1>
</refentry>

<refentry id="html.cleanup">
<refmeta>
<refentrytitle>html.cleanup</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.cleanup</refname>
<refpurpose>Attempt to clean up the resulting HTML?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.cleanup.frag">&lt;xsl:param name="html.cleanup"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, and if the <ulink url="http://www.exslt.org/">EXSLT</ulink>
extensions are supported by your processor, the resulting HTML will be
<quote>cleaned up</quote>. This improves the chances that the
resulting HTML will be valid. It may also improve the formatting of
some elements.</para>

<para>This parameter is different from <parameter moreinfo="none">make.valid.html</parameter>
because it uses extension functions to manipulate result-tree-fragments.</para>

</refsect1>
</refentry>

<refentry id="draft.watermark.image">
<refmeta>
<refentrytitle>draft.watermark.image</refentrytitle>
<refmiscinfo role="type">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>draft.watermark.image</refname>
<refpurpose>The URI of the image to be used for draft watermarks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="draft.watermark.image.frag">&lt;xsl:param name="draft.watermark.image"
           select="'http://docbook.sourceforge.net/release/images/draft.png'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The image to be used for draft watermarks.</para>

</refsect1>
</refentry>

<refentry id="generate.id.attributes">
<refmeta>
<refentrytitle>generate.id.attributes</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>generate.id.attributes</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="generate.id.attributes.frag">&lt;xsl:param name="generate.id.attributes"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, the HTML stylesheet will generate ID attributes on
containers. For example, the markup:</para>

<screen format="linespecific">&lt;section id="foo"&gt;&lt;title&gt;Some Title&lt;/title&gt;
&lt;para&gt;Some para.&lt;/para&gt;
&lt;/section&gt;</screen>

<para>might produce:</para>

<screen format="linespecific">&lt;div class="section" id="foo"&gt;
&lt;h2&gt;Some Title&lt;/h2&gt;
&lt;p&gt;Some para.&lt;/p&gt;
&lt;/div&gt;</screen>

<para>The alternative is to generate anchors:</para>

<screen format="linespecific">&lt;div class="section"&gt;
&lt;h2&gt;&lt;a name="foo"&gt;&lt;/a&gt;Some Title&lt;/h2&gt;
&lt;p&gt;Some para.&lt;/p&gt;
&lt;/div&gt;</screen>

<para>Because the <sgmltag class="attribute">name</sgmltag> attribute of
the <sgmltag>a</sgmltag> element and the <sgmltag class="attribute">id</sgmltag>
attribute of other tags are both of type <quote>ID</quote>, producing both
generates invalid documents.</para>

<para>As of version 1.50, you can use this switch to control which type of
identifier is generated. For backwards-compatibility, generating
<sgmltag>a</sgmltag> anchors is preferred.</para>

<para>Note: at present, this switch is incompletely implemented.
Disabling ID attributes will suppress them, but enabling ID attributes
will not suppress the anchors.</para>

</refsect1>
</refentry>

<refentry id="generate.meta.abstract">
<refmeta>
<refentrytitle>generate.meta.abstract</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.meta.abstract</refname>
<refpurpose>Generate HTML <sgmltag>META</sgmltag> element from <sgmltag>abstract</sgmltag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="generate.meta.abstract.frag">&lt;xsl:param name="generate.meta.abstract"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, document abstracts will be reproduced in the HTML
<sgmltag>HEAD</sgmltag> with <sgmltag class="starttag">meta name="description" content="..."</sgmltag>.</para>

</refsect1>
</refentry>

</reference>

<reference><title>XSLT Processing</title>
<refentry id="rootid">
<refmeta>
<refentrytitle>rootid</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>rootid</refname>
<refpurpose>Specify the root element to format</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="rootid.frag">&lt;xsl:param name="rootid"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">rootid</parameter> is specified, it must be the
value of an ID that occurs in the document being formatted. The entire
document will be loaded and parsed, but formatting will begin at the
element identified, rather than at the root. For example, this allows
you to process only chapter 4 of a book.</para>
<para>Because the entire document is available to the processor, automatic
numbering, cross references, and other dependencies are correctly
resolved.</para>

</refsect1>
</refentry>

<refentry id="suppress.navigation">
<refmeta>
<refentrytitle>suppress.navigation</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>suppress.navigation</refname>
<refpurpose>Disable header and footer navigation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="suppress.navigation.frag">&lt;xsl:param name="suppress.navigation"&gt;0&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>
If <literal moreinfo="none">suppress.navigation</literal> is turned on, header and
footer navigation will be suppressed.</para>

</refsect1>
</refentry>

<refentry id="suppress.navigation">
<refmeta>
<refentrytitle>suppress.header.navigation</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>suppress.header.navigation</refname>
<refpurpose>Disable header navigation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="suppress.header.navigation.frag">&lt;xsl:param name="suppress.header.navigation"&gt;0&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>
If <literal moreinfo="none">suppress.header.navigation</literal> is turned on, header
navigation will be suppressed.</para>

</refsect1>
</refentry>

<refentry id="suppress.navigation">
<refmeta>
<refentrytitle>suppress.footer.navigation</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>suppress.footer.navigation</refname>
<refpurpose>Disable footer navigation</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="suppress.footer.navigation.frag">&lt;xsl:param name="suppress.footer.navigation"&gt;0&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>
If <literal moreinfo="none">suppress.footer.navigation</literal> is turned on, footer
navigation will be suppressed.</para>

</refsect1>
</refentry>

<refentry id="header.rule">
<refmeta>
<refentrytitle>header.rule</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>header.rule</refname>
<refpurpose>Rule under headers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="header.rule.frag">&lt;xsl:param name="header.rule"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, a rule will be drawn below the page headers.</para>

</refsect1>
</refentry>

<refentry id="footer.rule">
<refmeta>
<refentrytitle>footer.rule</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footer.rule</refname>
<refpurpose>Rule over footers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="footer.rule.frag">&lt;xsl:param name="footer.rule"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, a rule will be drawn above the page footers.</para>

</refsect1>
</refentry>

</reference>

<reference><title>Meta/*Info</title>
<refentry id="inherit.keywords">
<refmeta>
<refentrytitle>inherit.keywords</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>inherit.keywords</refname>
<refpurpose>Inherit keywords from ancestor elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="inherit.keywords.frag">&lt;xsl:param name="inherit.keywords"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">inherit.keywords</parameter>
is non-zero, the keyword <sgmltag>META</sgmltag> for each HTML
<sgmltag>HEAD</sgmltag> element will include all of the keywords from
ancestral elements. Otherwise, only the keywords from the current section
will be used.
</para>

</refsect1>
</refentry>

<refentry id="make.single.year.ranges">
<refmeta>
<refentrytitle>make.single.year.ranges</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.single.year.ranges</refname>
<refpurpose>Print single-year ranges (e.g., 1998-1999)</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="make.single.year.ranges.frag">&lt;xsl:param name="make.single.year.ranges"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, year ranges that span a single year will be printed
in range notation (1998-1999) instead of discrete notation
(1998, 1999).</para>

</refsect1>
</refentry>

<refentry id="make.year.ranges">
<refmeta>
<refentrytitle>make.year.ranges</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.year.ranges</refname>
<refpurpose>Collate copyright years into ranges?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="make.year.ranges.frag">&lt;xsl:param name="make.year.ranges"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, copyright years will be collated into ranges.</para>

</refsect1>
</refentry>

<refentry id="author.othername.in.middle">
<refmeta>
<refentrytitle>author.othername.in.middle</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>author.othername.in.middle</refname>
<refpurpose>Is <sgmltag>othername</sgmltag> in <sgmltag>author</sgmltag> a
middle name?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="author.othername.in.middle.frag">&lt;xsl:param name="author.othername.in.middle"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), the <sgmltag>othername</sgmltag> of an <sgmltag>author</sgmltag>
appears between the <sgmltag>firstname</sgmltag> and
<sgmltag>surname</sgmltag>.  Otherwise, <sgmltag>othername</sgmltag>
is suppressed.
</para>

</refsect1>
</refentry>

<refentry id="generate.legalnotice.link">
<refmeta>
<refentrytitle>generate.legalnotice.link</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>generate.legalnotice.link</refname>
<refpurpose>TBD</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="generate.legalnotice.link.frag">&lt;xsl:param name="generate.legalnotice.link"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>TBD</para>

</refsect1>
</refentry>

</reference>

<reference><title>Reference Pages</title>
<refentry id="funcsynopsis.decoration">
<refmeta>
<refentrytitle>funcsynopsis.decoration</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>funcsynopsis.decoration</refname>
<refpurpose>Decorate elements of a FuncSynopsis?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="funcsynopsis.decoration.frag">&lt;xsl:param name="funcsynopsis.decoration"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), elements of the FuncSynopsis will be decorated (e.g. bold or
italic).  The decoration is controlled by functions that can be redefined
in a customization layer.
</para>

</refsect1>
</refentry>

<refentry id="funcsynopsis.style">
<refmeta>
<refentrytitle>funcsynopsis.style</refentrytitle>
<refmiscinfo role="type">list</refmiscinfo>
<refmiscinfo role="value">ansi</refmiscinfo>
<refmiscinfo role="value">kr</refmiscinfo>
</refmeta>
<refnamediv>
<refname>funcsynopsis.style</refname>
<refpurpose>What style of 'FuncSynopsis' should be generated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="funcsynopsis.style.frag">&lt;xsl:param name="funcsynopsis.style"&gt;kr&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <varname>funcsynopsis.style</varname> is <literal moreinfo="none">ansi</literal>,
ANSI-style function synopses are generated for a
<sgmltag>funcsynopsis</sgmltag>, otherwise K&amp;R-style
function synopses are generated.
</para>

</refsect1>
</refentry>

<refentry id="funcsynopsis.tabular.threshold">
<refmeta>
<refentrytitle>funcsynopsis.tabular.threshold</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>funcsynopsis.tabular.threshold</refname>
<refpurpose>Width beyond which a tabular presentation will be used</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="funcsynopsis.tabular.threshold.frag">&lt;xsl:param name="funcsynopsis.tabular.threshold"
           select="40"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">funcsynopsis.tabular.threshold</parameter> is greater than
zero then if a <sgmltag>funcprototype</sgmltag> is wider than the threshold
value, it will be presented in a table.</para>

</refsect1>
</refentry>

<refentry id="function.parens">
<refmeta>
<refentrytitle>function.parens</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>function.parens</refname>
<refpurpose>Generate parens after a function?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="function.parens.frag">&lt;xsl:param name="function.parens"&gt;0&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If not 0, the formatting of
a <sgmltag class="starttag">function</sgmltag> element will include
generated parenthesis.
</para>

</refsect1>
</refentry>

<refentry id="refentry.generate.name">
<refmeta>
<refentrytitle>refentry.generate.name</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.generate.name</refname>
<refpurpose>Output NAME header before 'RefName'(s)?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="refentry.generate.name.frag">&lt;xsl:param name="refentry.generate.name"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), a "NAME" section title is output before the list
of 'RefName's. This parameter and
<parameter moreinfo="none">refentry.generate.title</parameter> are mutually
exclusive. This means that if you change this parameter to zero, you
should set <parameter moreinfo="none">refentry.generate.title</parameter> to 1 unless
you want get quite strange output.
</para>

</refsect1>
</refentry>

<refentry id="refentry.generate.title">
<refmeta>
<refentrytitle>refentry.generate.title</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.generate.title</refname>
<refpurpose>Output title before 'RefName'(s)?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="refentry.generate.title.frag">&lt;xsl:param name="refentry.generate.title"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), the reference page title or first name is
output before the list of 'RefName's. This parameter and
<parameter moreinfo="none">refentry.generate.name</parameter> are mutually exclusive.
This means that if you change this parameter to 1, you
should set <parameter moreinfo="none">refentry.generate.name</parameter> to 0 unless
you want get quite strange output.</para>


</refsect1>
</refentry>

<refentry id="refentry.xref.manvolnum">
<refmeta>
<refentrytitle>refentry.xref.manvolnum</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.xref.manvolnum</refname>
<refpurpose>Output <sgmltag>manvolnum</sgmltag> as part of 
<sgmltag>refentry</sgmltag> cross-reference?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="refentry.xref.manvolnum.frag">&lt;xsl:param name="refentry.xref.manvolnum"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>if true (non-zero), the <sgmltag>manvolnum</sgmltag> is used when cross-referencing
<sgmltag>refentry</sgmltag>s, either with <sgmltag>xref</sgmltag>
or <sgmltag>citerefentry</sgmltag>.
</para>

</refsect1>
</refentry>

<refentry id="citerefentry.link">
<refmeta>
<refentrytitle>citerefentry.link</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>citerefentry.link</refname>
<refpurpose>Generate URL links when cross-referencing RefEntrys?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="citerefentry.link.frag">&lt;xsl:param name="citerefentry.link"
           select="'0'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, a web link will be generated, presumably
to an online man-&gt;HTML gateway. The text of the link is
generated by the generate.citerefentry.link template.
</para>

</refsect1>
</refentry>

<refentry id="refentry.separator">
<refmeta>
<refentrytitle>refentry.separator</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>refentry.separator</refname>
<refpurpose>Generate a separator between consecutive RefEntry elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="refentry.separator.frag">&lt;xsl:param name="refentry.separator"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, a separator will be generated between consecutive
reference pages.
</para>

</refsect1>
</refentry>

</reference>

<reference><title>Tables</title>
<refentry id="default.table.width">
<refmeta>
<refentrytitle>default.table.width</refentrytitle>
<refmiscinfo role="type">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.table.width</refname>
<refpurpose>The default width of tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="default.table.width.frag">&lt;xsl:param name="default.table.width"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If specified, this value will be used for the WIDTH attribute on
tables that do not specify an alternate width (with the dbhtml processing
instruction).</para>

</refsect1>
</refentry>

<refentry id="nominal.table.width">
<refmeta>
<refentrytitle>nominal.table.width</refentrytitle>
<refmiscinfo role="type">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nominal.table.width</refname>
<refpurpose>The (absolute) nominal width of tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="nominal.table.width.frag">&lt;xsl:param name="nominal.table.width"
           select="'6in'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>In order to convert CALS column widths into HTML column widths, it
is sometimes necessary to have an absolute table width to use for conversion
of mixed absolute and relative widths. This value must be an absolute
length (not a percentag).</para>

</refsect1>
</refentry>

<refentry id="table.borders.with.css">
<refmeta>
<refentrytitle>table.borders.with.css</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.borders.with.css</refname>
<refpurpose>Use CSS to specify table, row, and cell borders?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.borders.with.css.frag">&lt;xsl:param name="table.borders.with.css"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), CSS will be used to draw table borders.
</para>

</refsect1>
</refentry>

<refentry id="table.cell.border.style">
<refmeta>
<refentrytitle>table.cell.border.style</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>table.cell.border.style</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.cell.border.style.frag">&lt;xsl:param name="table.cell.border.style"
           select="'solid'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="table.cell.border.thickness">
<refmeta>
<refentrytitle>table.cell.border.thickness</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>table.cell.border.thickness</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.cell.border.thickness.frag">&lt;xsl:param name="table.cell.border.thickness"
           select="'0.5pt'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="table.cell.border.color">
<refmeta>
<refentrytitle>table.cell.border.color</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>table.cell.border.color</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.cell.border.color.frag">&lt;xsl:param name="table.cell.border.color"
           select="''"/&gt;
</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="table.frame.border.style">
<refmeta>
<refentrytitle>table.frame.border.style</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>table.frame.border.style</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.frame.border.style.frag">&lt;xsl:param name="table.frame.border.style"
           select="'solid'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="table.frame.border.thickness">
<refmeta>
<refentrytitle>table.frame.border.thickness</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>table.frame.border.thickness</refname>
<refpurpose>Specifies the thickness of the frame border</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.frame.border.thickness.frag">&lt;xsl:param name="table.frame.border.thickness"
           select="'0.5pt'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Specifies the thickness of the border on the table's frame.</para>

</refsect1>
</refentry>

<refentry id="table.frame.border.color">
<refmeta>
<refentrytitle>table.frame.border.color</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>table.frame.border.color</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.frame.border.color.frag">&lt;xsl:param name="table.frame.border.color"
           select="''"/&gt;
</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="html.cellspacing">
<refmeta>
<refentrytitle>html.cellspacing</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.cellspacing</refname>
<refpurpose>Default value for cellspacing in HTML tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.cellspacing.frag">&lt;xsl:param name="html.cellspacing"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If specified, this value will be used as the default cellspacing value
in HTML tables.</para>

</refsect1>
</refentry>

<refentry id="html.cellpadding">
<refmeta>
<refentrytitle>html.cellpadding</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.cellpadding</refname>
<refpurpose>Default value for cellpadding in HTML tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.cellpadding.frag">&lt;xsl:param name="html.cellpadding"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If specified, this value will be used as the default cellpadding value
in HTML tables.</para>

</refsect1>
</refentry>

</reference>

<reference><title>QAndASet</title>
<refentry id="qanda.defaultlabel">
<refmeta>
<refentrytitle>qanda.defaultlabel</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.defaultlabel</refname>
<refpurpose>Sets the default for defaultlabel on QandASet.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="qanda.defaultlabel.frag">&lt;xsl:param name="qanda.defaultlabel"&gt;number&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If no defaultlabel attribute is specified on a QandASet, this
value is used. It must be one of the legal values for the defaultlabel
attribute.
</para>

</refsect1>
</refentry>

<refentry id="qanda.inherit.numeration">
<refmeta>
<refentrytitle>qanda.inherit.numeration</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>qanda.inherit.numeration</refname>
<refpurpose>Does enumeration of QandASet components inherit the numeration of parent elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="qanda.inherit.numeration.frag">&lt;xsl:param name="qanda.inherit.numeration"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), numbered QandADiv elements and Questions and Answers inherit
the numeration of the ancestors of the QandASet.
</para>

</refsect1>
</refentry>

</reference>

<reference><title>Linking</title>
<refentry id="target.database.document"> 
<refmeta> 
<refentrytitle>target.database.document</refentrytitle> 
<refmiscinfo role="type">uri</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>target.database.document</refname> 
<refpurpose>Name of master database file for resolving
olinks</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <src:fragment id="target.database.document.frag">&lt;xsl:param name="target.database.document"
           select="''"/&gt;</src:fragment> 
</refsynopsisdiv> 
<refsect1>
<title>Description</title> 
<para>
To resolve olinks between documents, the stylesheets use
a master database document that identifies the  target datafiles for all the documents within the scope
of the olinks. This parameter value is the URI of 
the master document to be read during processing to resolve olinks.
The default value is <filename moreinfo="none">olinkdb.xml</filename>.</para>
<para>The data structure of the file is defined in the <filename moreinfo="none">targetdatabase.dtd</filename> DTD.  The database file provides the high level elements to record the identifiers, locations, and relationships of documents. The cross reference data for individual documents is generally pulled into the database using system entity references or XIncludes. See also <parameter moreinfo="none">targets.filename</parameter>.

</para> 
</refsect1> 
</refentry> 

<refentry id="targets.filename"> 
<refmeta> 
<refentrytitle>targets.filename</refentrytitle> 
<refmiscinfo role="type">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>targets.filename</refname> 
<refpurpose>Name of cross reference targets data file</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <src:fragment id="targets.filename.frag">&lt;xsl:param name="targets.filename"
           select="'target.db'"/&gt;</src:fragment> 
</refsynopsisdiv> 
<refsect1>
<title>Description</title> 
<para>
In order to resolve olinks efficiently, the stylesheets can
generate an external data file containing information about
all potential cross reference endpoints in a document.
This parameter lets you change the name of the generated
file from the default name <filename moreinfo="none">target.db</filename>.
The name must agree with that used in the target database
used to resolve olinks during processing.
See also <parameter moreinfo="none">target.database.document</parameter>.
</para> 
</refsect1> 
</refentry> 

<refentry id="collect.xref.targets"> 
<refmeta> 
<refentrytitle>collect.xref.targets</refentrytitle> 
<refmiscinfo role="type">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>collect.xref.targets</refname> 
<refpurpose>Controls whether cross reference data is
collected</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <src:fragment id="collect.xref.targets.frag">&lt;xsl:param name="collect.xref.targets"
           select="'no'"/&gt;</src:fragment> 
</refsynopsisdiv> 
<refsect1> 
<title>Description</title> 
<para>
In order to resolve olinks efficiently, the stylesheets can
generate an external data file containing information about
all potential cross reference endpoints in a document.
This parameter determines whether the collection process is run when the document is processed by the stylesheet. The default value is  <literal moreinfo="none">no</literal>, which means the data file is not generated during processing. The other choices are <literal moreinfo="none">yes</literal>, which means the data file is created and the document is processed for output, and <literal moreinfo="none">only</literal>, which means the data file is created but the document is not processed for output.
See also <parameter moreinfo="none">targets.filename</parameter>.
</para> 
</refsect1> 
</refentry> 

<refentry id="olink.base.uri"> 
<refmeta> 
<refentrytitle>olink.base.uri</refentrytitle> 
<refmiscinfo role="type">uri</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>olink.base.uri</refname> 
<refpurpose>Base URI used in olink hrefs</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <src:fragment id="olink.base.uri.frag">&lt;xsl:param name="olink.base.uri"
           select="''"/&gt; </src:fragment> 
</refsynopsisdiv> 
<refsect1> 
<title>Description</title> 
<para>When cross reference data is collected for resolving olinks, it may be necessary to prepend a base URI to each target's href. This parameter lets you set that base URI when cross reference data is collected. This feature is needed when you want to link to a document that is processed without chunking. The output filename for such a document is not known to the XSL stylesheet; the only target information consists of fragment identifiers such as <literal moreinfo="none">#idref</literal>. To enable the resolution of olinks between documents, you should pass the name of the HTML output file as the value of this parameter. Then the hrefs recorded in the cross reference data collection look like <literal moreinfo="none">outfile.html#idref</literal>, which can  be reached as links from other documents.</para> 
</refsect1> 
</refentry> 

<refentry id="use.local.olink.style"> 
<refmeta> 
<refentrytitle>use.local.olink.style</refentrytitle> 
<refmiscinfo role="type">boolean</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>use.local.olink.style</refname> 
<refpurpose>Process olinks using xref style of current
document</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <src:fragment id="use.local.olink.style.frag">&lt;xsl:param name="use.local.olink.style"
           select="0"/&gt; </src:fragment> 
</refsynopsisdiv> 
<refsect1> 
<title>Description</title> 
<para>When cross reference data is collected for use by olinks, the data for each potential target includes one field containing a completely assembled cross reference string, as if it were an xref generated in that document. Other fields record the separate title, number, and element name of each target. When an olink is formed to a target from another document, the olink resolves to that preassembled string by default. If the <parameter moreinfo="none">use.local.olink.style</parameter> parameter is set to non-zero, then instead the cross
reference string is formed again from the target title, number, and
element name, using the stylesheet processing the targeting document.
Then olinks will match the xref style in the targeting document
rather than in the target document. If  both documents are processed
with the same stylesheet, then the results will be the same.</para> 
</refsect1> 
</refentry> 

<refentry id="current.docid"> 
<refmeta> 
<refentrytitle>current.docid</refentrytitle> 
<refmiscinfo role="type">string</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>current.docid</refname> 
<refpurpose>targetdoc identifier for the document being
processed</refpurpose> 
</refnamediv> 
<refsynopsisdiv> <src:fragment id="current.docid.frag">&lt;xsl:param name="current.docid"
           select="''"/&gt; </src:fragment> 
</refsynopsisdiv> 
<refsect1> 
<title>Description</title> 
<para>When olinks between documents are resolved for HTML output, the stylesheet can compute the relative path between the current document and the target document. The stylesheet needs to know the <literal moreinfo="none">targetdoc</literal> identifiers for both documents, as they appear in the <parameter moreinfo="none">target.database.document</parameter> database file. This parameter passes to the stylesheet
the targetdoc identifier of the current document, since that
identifier does not appear in the document itself. </para>
<para>This parameter can also be used for print output. If an olink's  <literal moreinfo="none">targetdoc</literal>  id differs from the <literal moreinfo="none">current.docid</literal>, then the stylesheet can append the target document's title to the generated olink text. That identifies to the reader that the link is to a different document, not the current document. See also <parameter moreinfo="none">olink.doctitle</parameter> to enable that feature.</para> 
</refsect1> 
</refentry> 

<refentry id="olink.doctitle"> 
<refmeta> 
<refentrytitle>olink.doctitle</refentrytitle> 
<refmiscinfo role="type">boolean</refmiscinfo> 
</refmeta> 
<refnamediv> 
<refname>olink.doctitle</refname> 
<refpurpose>show the document title for external olinks?</refpurpose>

</refnamediv> 
<refsynopsisdiv> <src:fragment id="olink.doctitle.frag">&lt;xsl:param name="olink.doctitle"
           select="0"/&gt; </src:fragment> 
</refsynopsisdiv> 
<refsect1> 
<title>Description</title> 
<para>When olinks between documents are resolved for print output, the generated text may not make it clear that the reference is to another document. It is possible for the stylesheets to append the other document's title to external olinks. For this to happen, two parameters must be set. The <parameter moreinfo="none">olink.doctitle</parameter> parameter should be set to nonzero to enable this
feature. And you should set the <parameter moreinfo="none">current.docid</parameter> parameter to the document id for the  document currently
being processed for output.  If an olink's  <literal moreinfo="none">targetdoc</literal>  id differs from the <literal moreinfo="none">current.docid</literal>, then the stylesheet can append the target document's
title to the generated olink text. </para> 
</refsect1> 
</refentry> 

<refentry id="link.mailto.url">
<refmeta>
<refentrytitle>link.mailto.url</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>link.mailto.url</refname>
<refpurpose>Mailto URL for the LINK REL=made HTML HEAD element</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="link.mailto.url.frag">&lt;xsl:param name="link.mailto.url"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If not the empty string, this address will be used for the
REL=made <sgmltag>LINK</sgmltag> element in the HTML <sgmltag>HEAD</sgmltag>.
</para>

</refsect1>
</refentry>

<refentry id="ulink.target">
<refmeta>
<refentrytitle>ulink.target</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ulink.target</refname>
<refpurpose>The HTML anchor target for ULinks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="ulink.target.frag">&lt;xsl:param name="ulink.target"
           select="'_top'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">ulink.target</parameter> is set, its value will
be used for the <sgmltag class="attribute">target</sgmltag> attribute
on anchors generated for <sgmltag>ulink</sgmltag>s.</para>

</refsect1>
</refentry>

<refentry id="olink.fragid">
<refmeta>
<refentrytitle>olink.fragid</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>olink.fragid</refname>
<refpurpose>Names the fragment identifier portion of an OLink resolver query</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="olink.fragid.frag">&lt;xsl:param name="olink.fragid"
           select="'fragid='"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="olink.outline.ext">
<refmeta>
<refentrytitle>olink.outline.ext</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>olink.outline.ext</refname>
<refpurpose>The extension of OLink outline files</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="olink.outline.ext.frag">&lt;xsl:param name="olink.outline.ext"
           select="'.olink'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="olink.pubid">
<refmeta>
<refentrytitle>olink.pubid</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>olink.pubid</refname>
<refpurpose>Names the public identifier portion of an OLink resolver query</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="olink.pubid.frag">&lt;xsl:param name="olink.pubid"
           select="'pubid='"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="olink.sysid">
<refmeta>
<refentrytitle>olink.sysid</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>olink.sysid</refname>
<refpurpose>Names the system identifier portion of an OLink resolver query</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="olink.sysid.frag">&lt;xsl:param name="olink.sysid"
           select="'sysid='"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="olink.resolver">
<refmeta>
<refentrytitle>olink.resolver</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>olink.resolver</refname>
<refpurpose>The root name of the OLink resolver (usually a script)</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="olink.resolver.frag">&lt;xsl:param name="olink.resolver"
           select="'/cgi-bin/olink'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

</reference>

<reference><title>Bibliography</title>
<refentry id="biblioentry.item.separator">
<refmeta>
<refentrytitle>biblioentry.item.separator</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>biblioentry.item.separator</refname>
<refpurpose>Text to separate bibliography entries</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="biblioentry.item.separator.frag">&lt;xsl:param name="biblioentry.item.separator"&gt;. &lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Text to separate bibliography entries
</para>

</refsect1>
</refentry>

<refentry id="bibliography.collection">
<refmeta>
<refentrytitle>bibliography.collection</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bibliography.collection</refname>
<refpurpose>Name of the bibliography collection file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="bibliography.collection.frag">&lt;xsl:param name="bibliography.collection"
           select="'http://docbook.sourceforge.net/release/bibliography/bibliography.xml'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Maintaining bibliography entries across a set of documents is tedious, time
consuming, and error prone. It makes much more sense, usually, to store all of
the bibliography entries in a single place and simply <quote>extract</quote>
the ones you need in each document.</para>

<para>That's the purpose of the
<parameter moreinfo="none">bibliography.collection</parameter> parameter. To setup a global
bibliography <quote>database</quote>, follow these steps:</para>

<para>First, create a stand-alone bibliography document that contains all of
the documents that you wish to reference. Make sure that each bibliography
entry (whether you use <sgmltag>biblioentry</sgmltag> or <sgmltag>bibliomixed</sgmltag>)
has an ID.</para>

<para>My global bibliography, <filename moreinfo="none">~/bibliography.xml</filename> begins
like this:</para>

<informalexample>
<programlisting format="linespecific">&lt;!DOCTYPE bibliography
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;bibliography&gt;&lt;title&gt;References&lt;/title&gt;

&lt;bibliomixed id="xml-rec"&gt;&lt;abbrev&gt;XML 1.0&lt;/abbrev&gt;Tim Bray,
Jean Paoli, C. M. Sperberg-McQueen, and Eve Maler, editors.
&lt;citetitle&gt;&lt;ulink url="http://www.w3.org/TR/REC-xml"&gt;Extensible Markup
Language (XML) 1.0 Second Edition&lt;/ulink&gt;&lt;/citetitle&gt;.
World Wide Web Consortium, 2000.
&lt;/bibliomixed&gt;

&lt;bibliomixed id="xml-names"&gt;&lt;abbrev&gt;Namespaces&lt;/abbrev&gt;Tim Bray,
Dave Hollander,
and Andrew Layman, editors.
&lt;citetitle&gt;&lt;ulink url="http://www.w3.org/TR/REC-xml-names/"&gt;Namespaces in
XML&lt;/ulink&gt;&lt;/citetitle&gt;.
World Wide Web Consortium, 1999.
&lt;/bibliomixed&gt;

&lt;!-- ... --&gt;
&lt;/bibliography&gt;
</programlisting>
</informalexample>

<para>When you create a bibliography in your document, simply
provide <emphasis>empty</emphasis> <sgmltag>bibliomixed</sgmltag>
entries for each document that you wish to cite. Make sure that these
elements have the same ID as the corresponding <quote>real</quote>
entry in your global bibliography.</para>

<para>For example:</para>

<informalexample>
<programlisting format="linespecific">&lt;bibliography&gt;&lt;title&gt;Bibliography&lt;/title&gt;

&lt;bibliomixed id="xml-rec"/&gt;
&lt;bibliomixed id="xml-names"/&gt;
&lt;bibliomixed id="DKnuth86"&gt;Donald E. Knuth. &lt;citetitle&gt;Computers and
Typesetting: Volume B, TeX: The Program&lt;/citetitle&gt;. Addison-Wesley,
1986.  ISBN 0-201-13437-3.
&lt;/bibliomixed&gt;
&lt;bibliomixed id="relaxng"/&gt;

&lt;/bibliography&gt;</programlisting>
</informalexample>

<para>Note that it's perfectly acceptable to mix entries from your
global bibliography with <quote>normal</quote> entries. You can use
<sgmltag>xref</sgmltag> or other elements to cross-reference your
bibliography entries in exactly the same way you do now.</para>

<para>Finally, when you are ready to format your document, simply set the
<parameter moreinfo="none">bibliography.collection</parameter> parameter (in either a
customization layer or directly through your processor's interface) to
point to your global bibliography.</para>

<para>The stylesheets will format the bibliography in your document as if
all of the entries referenced appeared there literally.</para>

</refsect1>
</refentry>

<refentry id="bibliography.numbered">
<refmeta>
<refentrytitle>bibliography.numbered</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>bibliography.numbered</refname>
<refpurpose>Should bibliography entries be numbered?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="bibliography.numbered.frag">&lt;xsl:param name="bibliography.numbered"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero bibliography entries will be numbered</para>

</refsect1>
</refentry>

</reference>

<reference><title>Glossary</title>
<refentry id="glossterm.auto.link">
<refmeta>
<refentrytitle>glossterm.auto.link</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossterm.auto.link</refname>
<refpurpose>Generate links from glossterm to glossentry automaticaly?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="glossterm.auto.link.frag">&lt;xsl:param name="glossterm.auto.link"
           select="'0'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, a link will be automatically created from glossterm 
to glossentry for that glossary term. This is usefull when your
glossterm names are consistent and you don't want to add links
manually.</para>
<para>If there is <sgmltag class="attribute">linkend</sgmltag> on
<sgmltag>glossterm</sgmltag> then is used instead of autogeneration of
link.</para>

</refsect1>
</refentry>

<refentry id="firstterm.only.link">
<refmeta>
<refentrytitle>firstterm.only.link</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>firstterm.only.link</refname>
<refpurpose>Does automatic glossterm linking only apply to firstterms?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="firstterm.only.link.frag">&lt;xsl:param name="firstterm.only.link"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true, only <sgmltag>firstterm</sgmltag>s will be automatically linked
to the glossary. If glossary linking is not enabled, this parameter
has no effect.</para>

</refsect1>
</refentry>

<refentry id="glossary.collection">
<refmeta>
<refentrytitle>glossary.collection</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossary.collection</refname>
<refpurpose>Name of the glossary collection file</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="glossary.collection.frag">&lt;xsl:param name="glossary.collection"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Glossaries maintained independently across a set of documents
are likely to become inconsistent unless considerable effort is
expended to keep them in sync. It makes much more sense, usually, to
store all of the glossary entries in a single place and simply
<quote>extract</quote> the ones you need in each document.</para>

<para>That's the purpose of the
<parameter moreinfo="none">glossary.collection</parameter> parameter. To setup a global
glossary <quote>database</quote>, follow these steps:</para>

<refsect2><title>Setting Up the Glossary Database</title>

<para>First, create a stand-alone glossary document that contains all of
the entries that you wish to reference. Make sure that each glossary
entry has an ID.</para>

<para>Here's an example glossary:</para>

<informalexample>
<programlisting format="linespecific">
&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE glossary
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd"&gt;
&lt;glossary&gt;
&lt;glossaryinfo&gt;
&lt;editor&gt;&lt;firstname&gt;Eric&lt;/firstname&gt;&lt;surname&gt;Raymond&lt;/surname&gt;&lt;/editor&gt;
&lt;title&gt;Jargon File 4.2.3 (abridged)&lt;/title&gt;
&lt;releaseinfo&gt;Just some test data&lt;/releaseinfo&gt;
&lt;/glossaryinfo&gt;

&lt;glossdiv&gt;&lt;title&gt;0&lt;/title&gt;

&lt;glossentry&gt;
&lt;glossterm&gt;0&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;Numeric zero, as opposed to the letter `O' (the 15th letter of
the English alphabet). In their unmodified forms they look a lot
alike, and various kluges invented to make them visually distinct have
compounded the confusion. If your zero is center-dotted and letter-O
is not, or if letter-O looks almost rectangular but zero looks more
like an American football stood on end (or the reverse), you're
probably looking at a modern character display (though the dotted zero
seems to have originated as an option on IBM 3270 controllers). If
your zero is slashed but letter-O is not, you're probably looking at
an old-style ASCII graphic set descended from the default typewheel on
the venerable ASR-33 Teletype (Scandinavians, for whom /O is a letter,
curse this arrangement). (Interestingly, the slashed zero long
predates computers; Florian Cajori's monumental "A History of
Mathematical Notations" notes that it was used in the twelfth and
thirteenth centuries.) If letter-O has a slash across it and the zero
does not, your display is tuned for a very old convention used at IBM
and a few other early mainframe makers (Scandinavians curse &lt;emphasis&gt;this&lt;/emphasis&gt;
arrangement even more, because it means two of their letters collide).
Some Burroughs/Unisys equipment displays a zero with a &lt;emphasis&gt;reversed&lt;/emphasis&gt;
slash. Old CDC computers rendered letter O as an unbroken oval and 0
as an oval broken at upper right and lower left. And yet another
convention common on early line printers left zero unornamented but
added a tail or hook to the letter-O so that it resembled an inverted
Q or cursive capital letter-O (this was endorsed by a draft ANSI
standard for how to draw ASCII characters, but the final standard
changed the distinguisher to a tick-mark in the upper-left corner).
Are we sufficiently confused yet?&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;

&lt;glossentry&gt;
&lt;glossterm&gt;1TBS&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para role="accidence"&gt;
&lt;phrase role="pronounce"&gt;&lt;/phrase&gt;
&lt;phrase role="partsofspeach"&gt;n&lt;/phrase&gt;
&lt;/para&gt;
&lt;para&gt;The "One True Brace Style"&lt;/para&gt;
&lt;glossseealso&gt;indent style&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;

&lt;!-- ... --&gt;

&lt;/glossdiv&gt;

&lt;!-- ... --&gt;

&lt;/glossary&gt;</programlisting>
</informalexample>

</refsect2>

<refsect2><title>Marking Up Glossary Terms</title>

<para>That takes care of the glossary database, now you have to get the entries
into your document. Unlike bibliography entries, which can be empty, creating
<quote>placeholder</quote> glossary entries would be very tedious. So instead,
support for <parameter moreinfo="none">glossary.collection</parameter> relies on implicit linking.</para>

<para>In your source document, simply use <sgmltag>firstterm</sgmltag> and
<sgmltag>glossterm</sgmltag> to identify the terms you wish to have included
in the glossary. The stylesheets assume that you will either set the
<sgmltag class="attribute">baseform</sgmltag> attribute correctly, or that the
content of the element exactly matches a term in your glossary.</para>

<para>If you're using a <parameter moreinfo="none">glossary.collection</parameter>, don't
make explicit links on the terms in your document.</para>

<para>So, in your document, you might write things like this:</para>

<informalexample>
<programlisting format="linespecific">&lt;para&gt;This is dummy text, without any real meaning.
The point is simply to reference glossary terms like &lt;glossterm&gt;0&lt;/glossterm&gt;
and the &lt;firstterm baseform="1TBS"&gt;One True Brace Style (1TBS)&lt;/firstterm&gt;.
The &lt;glossterm&gt;1TBS&lt;/glossterm&gt;, as you can probably imagine, is a nearly
religious issue.&lt;/para&gt;</programlisting>
</informalexample>

<para>If you set the <parameter moreinfo="none">firstterm.only.link</parameter> parameter,
only the terms marked with <sgmltag>firstterm</sgmltag> will be links.
Otherwise, all the terms will be linked.</para>

</refsect2>

<refsect2><title>Marking Up the Glossary</title>

<para>The glossary itself has to be identified for the stylesheets. For lack
of a better choice, the <sgmltag class="attribute">role</sgmltag> is used.
To identify the glossary as the target for automatic processing, set
the role to <quote><literal moreinfo="none">auto</literal></quote>. The title of this
glossary (and any other information from the <sgmltag>glossaryinfo</sgmltag>
that's rendered by your stylesheet) will be displayed, but the entries will
come from the database.
</para>

<para>Unfortunately, the glossary can't be empty, so you must put in
at least one <sgmltag>glossentry</sgmltag>. The content of this entry
is irrelevant, it will not be rendered:</para>

<informalexample>
<programlisting format="linespecific">&lt;glossary role="auto"&gt;
&lt;glossentry&gt;
&lt;glossterm&gt;Irrelevant&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;If you can see this, the document was processed incorrectly. Use
the &lt;parameter&gt;glossary.collection&lt;/parameter&gt; parameter.&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;
&lt;/glossary&gt;</programlisting>
</informalexample>

<para>What about glossary divisions? If your glossary database has glossary
divisions <emphasis>and</emphasis> your automatic glossary contains at least
one <sgmltag>glossdiv</sgmltag>, the automic glossary will have divisions.
If the <sgmltag>glossdiv</sgmltag> is missing from either location, no divisions
will be rendered.</para>

<para>Glossary entries (and divisions, if appropriate) in the glossary will
occur in precisely the order they occur in your database.</para>

</refsect2>

<refsect2><title>Formatting the Document</title>

<para>Finally, when you are ready to format your document, simply set the
<parameter moreinfo="none">glossary.collection</parameter> parameter (in either a
customization layer or directly through your processor's interface) to
point to your global glossary.</para>

<para>The stylesheets will format the glossary in your document as if
all of the entries implicilty referenced appeared there literally.</para>
</refsect2>

<refsect2><title>Limitations</title>

<para>Glossary cross-references <emphasis>within the glossary</emphasis> are
not supported. For example, this <emphasis>will not</emphasis> work:</para>

<informalexample>
<programlisting format="linespecific">&lt;glossentry&gt;
&lt;glossterm&gt;gloss-1&lt;/glossterm&gt;
&lt;glossdef&gt;&lt;para&gt;A description that references &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/para&gt;
&lt;glossseealso&gt;gloss-2&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;</programlisting>
</informalexample>

<para>If you put glossary cross-references in your glossary that way,
you'll get the cryptic error: <computeroutput moreinfo="none">Warning:
glossary.collection specified, but there are 0 automatic
glossaries</computeroutput>.</para>

<para>Instead, you must do two things:</para>

<orderedlist inheritnum="ignore" continuation="restarts">
<listitem>
<para>Markup your glossary using <sgmltag>glossseealso</sgmltag>:</para>

<informalexample>
<programlisting format="linespecific">&lt;glossentry&gt;
&lt;glossterm&gt;gloss-1&lt;/glossterm&gt;
&lt;glossdef&gt;&lt;para&gt;A description that references &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/para&gt;
&lt;glossseealso&gt;gloss-2&lt;/glossseealso&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;</programlisting>
</informalexample>
</listitem>

<listitem>
<para>Make sure there is at least one <sgmltag>glossterm</sgmltag> reference to
<glossterm>gloss-2</glossterm> <emphasis>in your document</emphasis>. The
easiest way to do that is probably within a <sgmltag>remark</sgmltag> in your
automatic glossary:</para>

<informalexample>
<programlisting format="linespecific">&lt;glossary role="auto"&gt;
&lt;remark&gt;Make sure there's a reference to &lt;glossterm&gt;gloss-2&lt;/glossterm&gt;.&lt;/remark&gt;
&lt;glossentry&gt;
&lt;glossterm&gt;Irrelevant&lt;/glossterm&gt;
&lt;glossdef&gt;
&lt;para&gt;If you can see this, the document was processed incorrectly. Use
the &lt;parameter&gt;glossary.collection&lt;/parameter&gt; parameter.&lt;/para&gt;
&lt;/glossdef&gt;
&lt;/glossentry&gt;
&lt;/glossary&gt;</programlisting>
</informalexample>
</listitem>
</orderedlist>
</refsect2>

</refsect1>
</refentry>

<refentry id="glossentry.show.acronym">
<refmeta>
<refentrytitle>glossentry.show.acronym</refentrytitle>
<refmiscinfo role="type">list</refmiscinfo>
</refmeta>
<refnamediv>
<refname>glossentry.show.acronym</refname>
<refpurpose>Display <sgmltag>glossentry</sgmltag> acronyms?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="glossentry.show.acronym.frag">&lt;xsl:param name="glossentry.show.acronym"
           select="'no'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>A setting of <quote>yes</quote> means they should be displayed;
<quote>no</quote> means they shouldn't. If <quote>primary</quote> is used,
then they are shown as the primary text for the entry.</para>

<note>
<para>This setting controls both <sgmltag>acronym</sgmltag> and
<sgmltag>abbrev</sgmltag> elements in the <sgmltag>glossentry</sgmltag>.</para>
</note>

</refsect1>
</refentry>

</reference>

<reference><title>Miscellaneous</title>
<refentry id="formal.procedures">
<refmeta>
<refentrytitle>formal.procedures</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>formal.procedures</refname>
<refpurpose>Selects formal or informal procedures</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="formal.procedures.frag">&lt;xsl:param name="formal.procedures"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Formal procedures are numbered and always have a title.
</para>

</refsect1>
</refentry>

<refentry id="formal.title.placement">
<refmeta>
<refentrytitle>formal.title.placement</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>formal.title.placement</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="formal.title.placement.frag">&lt;xsl:param name="formal.title.placement"&gt;
figure before
example before
equation before
table before
procedure before
&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Specifies where formal object titles should occur. For each formal object
type (<sgmltag>figure</sgmltag>,
<sgmltag>example</sgmltag>,
<sgmltag>equation</sgmltag>,
<sgmltag>table</sgmltag>, and <sgmltag>procedure</sgmltag>)
you can specify either the keyword
<quote><literal moreinfo="none">before</literal></quote> or
<quote><literal moreinfo="none">after</literal></quote>.</para>

</refsect1>
</refentry>

<refentry id="runinhead.default.title.end.punct">
<refmeta>
<refentrytitle>runinhead.default.title.end.punct</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>runinhead.default.title.end.punct</refname>
<refpurpose>Default punctuation character on a run-in-head</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="runinhead.default.title.end.punct.frag">&lt;xsl:param name="runinhead.default.title.end.punct"
           select="'.'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:
</para>

</refsect1>
</refentry>

<refentry id="runinhead.title.end.punct">
<refmeta>
<refentrytitle>runinhead.title.end.punct</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>runinhead.title.end.punct</refname>
<refpurpose>Characters that count as punctuation on a run-in-head</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="runinhead.title.end.punct.frag">&lt;xsl:param name="runinhead.title.end.punct"
           select="'.!?:'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:
</para>

</refsect1>
</refentry>

<refentry id="show.comments">
<refmeta>
<refentrytitle>show.comments</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>show.comments</refname>
<refpurpose>Display <sgmltag>comment</sgmltag> elements?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="show.comments.frag">&lt;xsl:param name="show.comments"&gt;1&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), comments will be displayed, otherwise they are suppressed.
Comments here refers to the <sgmltag>comment</sgmltag> element,
which will be renamed <sgmltag>remark</sgmltag> in DocBook V4.0,
not XML comments (&lt;-- like this --&gt;) which are unavailable.
</para>

</refsect1>
</refentry>

<refentry id="show.revisionflag">
<refmeta>
<refentrytitle>show.revisionflag</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>show.revisionflag</refname>
<refpurpose>Enable decoration of elements that have a revisionflag</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="show.revisionflag.frag">&lt;xsl:param name="show.revisionflag"&gt;0&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>
If <literal moreinfo="none">show.revisionflag</literal> is turned on, then the stylesheets
may produce additional markup designed to allow a CSS stylesheet to
highlight elements that have specific revisionflag settings.</para>

<para>The markup inserted will be usually be either a &lt;span&gt; or &lt;div&gt;
with an appropriate <literal moreinfo="none">class</literal> attribute. (The value of
the class attribute will be the same as the value of the revisionflag
attribute). In some contexts, for example tables, where extra markup
would be structurally illegal, the class attribute will be added to the
appropriate container element.</para>

<para>In general, the stylesheets only test for revisionflag in contexts
where an importing stylesheet would have to redefine whole templates.
Most of the revisionflag processing is expected to be done by another
stylesheet, for example <filename moreinfo="none">changebars.xsl</filename>.</para>

</refsect1>
</refentry>

<refentry id="shade.verbatim">
<refmeta>
<refentrytitle>shade.verbatim</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>shade.verbatim</refname>
<refpurpose>Should verbatim environments be shaded?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="shade.verbatim.frag">&lt;xsl:param name="shade.verbatim"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="shade.verbatim.style">
<refmeta>
<refentrytitle>shade.verbatim.style</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>shade.verbatim.style</refname>
<refpurpose>Properties that specify the style of shaded verbatim listings</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="shade.verbatim.style.frag">&lt;xsl:attribute-set name="shade.verbatim.style"&gt;
  &lt;xsl:attribute name="border"&gt;0&lt;/xsl:attribute&gt;
  &lt;xsl:attribute name="bgcolor"&gt;#E0E0E0&lt;/xsl:attribute&gt;
&lt;/xsl:attribute-set&gt;
</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="punct.honorific">
<refmeta>
<refentrytitle>punct.honorific</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>punct.honorific</refname>
<refpurpose>Punctuation after an honorific in a personal name.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="punct.honorific.frag">&lt;xsl:param name="punct.honorific"
           select="'.'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the punctuation that should be added after an
honorific in a personal name.</para>

</refsect1>
</refentry>

<refentry id="segmentedlist.as.table">
<refmeta>
<refentrytitle>segmentedlist.as.table</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>segmentedlist.as.table</refname>
<refpurpose>Format segmented lists as tables?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="segmentedlist.as.table.frag">&lt;xsl:param name="segmentedlist.as.table"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, <sgmltag>segmentedlist</sgmltag>s will be formatted as
tables.</para>

</refsect1>
</refentry>

<refentry id="variablelist.as.table">
<refmeta>
<refentrytitle>variablelist.as.table</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>variablelist.as.table</refname>
<refpurpose>Format <sgmltag>variablelist</sgmltag>s as tables?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="variablelist.as.table.frag">&lt;xsl:param name="variablelist.as.table"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, <sgmltag>variablelist</sgmltag>s will be formatted as
tables.</para>

<para>This parameter only applys to the HTML transformations. In the
FO case, proper list markup is robust enough to handle the formatting.
But see also <parameter moreinfo="none">variablelist.as.blocks</parameter>.</para>

</refsect1>
</refentry>

<refentry id="tex.math.in.alt">
<refmeta>
<refentrytitle>tex.math.in.alt</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tex.math.in.alt</refname>
<refpurpose>TeX notation used for equations</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="tex.math.in.alt.frag">&lt;xsl:param name="tex.math.in.alt"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want type math directly in TeX notation in equations,
this parameter specifies notation used. Currently are supported two
values -- <literal moreinfo="none">plain</literal> and <literal moreinfo="none">latex</literal>. Empty
value means that you are not using TeX math at all.</para>

<para>Preferred way for including TeX alternative of math is inside of
<sgmltag>textobject</sgmltag> element. Eg.:</para>

<programlisting format="linespecific">&lt;inlineequation&gt;
&lt;inlinemediaobject&gt;
&lt;imageobject&gt;
&lt;imagedata fileref="eq1.gif"/&gt;
&lt;/imageobject&gt;
&lt;textobject&gt;&lt;phrase&gt;E=mc squared&lt;/phrase&gt;&lt;/textobject&gt;
&lt;textobject role="tex"&gt;&lt;phrase&gt;E=mc^2&lt;/phrase&gt;&lt;/textobject&gt;
&lt;/inlinemediaobject&gt;
&lt;/inlineequation&gt;</programlisting>

<para>If you are using <sgmltag>graphic</sgmltag> element, you can
store TeX inside <sgmltag>alt</sgmltag> element:</para>

<programlisting format="linespecific">&lt;inlineequation&gt;
&lt;alt role="tex"&gt;a^2+b^2=c^2&lt;/alt&gt;
&lt;graphic fileref="a2b2c2.gif"/&gt;  
&lt;/inlineequation&gt;</programlisting>

<para>If you want use this feature, you should process your FO with
PassiveTeX, which only supports TeX math notation. When calling
stylsheet, don't forget to specify also
passivetex.extensions=1.</para>

<para>If you want equations in HTML, just process generated file
<filename moreinfo="none">tex-math-equations.tex</filename> by TeX or LaTeX. Then run
dvi2bitmap program on result DVI file. You will get images for
equations in your document.</para>

</refsect1>
</refentry>

<refentry id="tex.math.file">
<refmeta>
<refentrytitle>tex.math.file</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tex.math.file</refname>
<refpurpose>Name of temporary file for generating images from equations</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="tex.math.file.frag">&lt;xsl:param name="tex.math.file"
           select="'tex-math-equations.tex'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Name of auxiliary file for TeX equations. This file can be
processed by dvi2bitmap to get bitmap versions of equations for HTML
output.</para>

</refsect1>
</refentry>

<refentry id="tex.math.delims">
<refmeta>
<refentrytitle>tex.math.delims</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>tex.math.delims</refname>
<refpurpose>Should be equations outputed for processing by TeX
automatically surrounded by math mode delimiters</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="tex.math.delims.frag">&lt;xsl:param name="tex.math.delims"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>For compatibility with DSSSL based DBTeXMath from Allin Cottrell
you should set this parameter to 0.</para>

</refsect1>
</refentry>

<refentry id="pixels.per.inch">
<refmeta>
<refentrytitle>pixels.per.inch</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>pixels.per.inch</refname>
<refpurpose>How many pixels are there per inch?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="pixels.per.inch.frag">&lt;xsl:param name="pixels.per.inch"
           select="90"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>When lengths are converted to pixels, this value is used to
determine the size of a pixel. The default value is taken from the
<ulink url="http://www.w3.org/TR/xsl/slice5.html#pixels">XSL
Recommendation</ulink>.
</para>

</refsect1>
</refentry>

<refentry id="points.per.em">
<refmeta>
<refentrytitle>points.per.em</refentrytitle>
<refmiscinfo role="type">number</refmiscinfo>
</refmeta>
<refnamediv>
<refname>points.per.em</refname>
<refpurpose>Specify the nominal size of an em-space in points</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="points.per.em.frag">&lt;xsl:param name="points.per.em"
           select="10"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="use.svg">
<refmeta>
<refentrytitle>use.svg</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.svg</refname>
<refpurpose>Allow SVG in the result tree?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="use.svg.frag">&lt;xsl:param name="use.svg"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, SVG will be considered an acceptable image format. SVG
is passed through to the result tree, so correct rendering of the resulting
diagram depends on the formatter (FO processor or web browser) that is used
to process the output from the stylesheet.</para>

</refsect1>
</refentry>

<refentry id="use.role.as.xrefstyle">
<refmeta>
<refentrytitle>use.role.as.xrefstyle</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.role.as.xrefstyle</refname>
<refpurpose>Use <sgmltag class="attribute">role</sgmltag> attribute for
<sgmltag class="attribute">xrefstyle</sgmltag> on <sgmltag>xref</sgmltag>?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="use.role.as.xrefstyle.frag">&lt;xsl:param name="use.role.as.xrefstyle"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, the <sgmltag class="attribute">role</sgmltag> attribute on
<sgmltag>xref</sgmltag> will be used to select the cross reference style.
The <ulink url="http://www.oasis-open.org/docbook/">DocBook
Technical Committee</ulink> recently added an
<sgmltag class="attribute">xrefstyle</sgmltag> attribute for this purpose.
If the <sgmltag class="attribute">xrefstyle</sgmltag> attribute
is present, <sgmltag class="attribute">role</sgmltag> will be ignored, regardless
of this setting.</para>

<para>Until an official DocBook release that includes the new
attribute, this flag allows <sgmltag class="attribute">role</sgmltag>
to serve that purpose.</para>

</refsect1>

<refsect1><title>Example</title>

<para>The following small stylesheet shows how to configure the stylesheets to make
use of the cross reference style:</para>

<programlisting format="linespecific">&lt;?xml version="1.0"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0"&gt;

&lt;xsl:import href="../xsl/html/docbook.xsl"/&gt;

&lt;xsl:output method="html"/&gt;

&lt;xsl:param name="local.l10n.xml" select="document('')"/&gt;
&lt;l:i18n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0"&gt;
  &lt;l:l10n xmlns:l="http://docbook.sourceforge.net/xmlns/l10n/1.0" language="en"&gt;
   &lt;l:context name="xref"&gt;
      &lt;l:template name="chapter" style="title" text="Chapter %n, %t"/&gt;
      &lt;l:template name="chapter" text="Chapter %n"/&gt;
    &lt;/l:context&gt;
  &lt;/l:l10n&gt;
&lt;/l:i18n&gt;

&lt;/xsl:stylesheet&gt;</programlisting>

<para>With this stylesheet, the cross references in the following document:</para>

<programlisting format="linespecific">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
                  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd"&gt;
&lt;book id="book"&gt;&lt;title&gt;Book&lt;/title&gt;

&lt;preface&gt;
&lt;title&gt;Preface&lt;/title&gt;

&lt;para&gt;Normal: &lt;xref linkend="ch1"/&gt;.&lt;/para&gt;
&lt;para&gt;Title: &lt;xref xrefstyle="title" linkend="ch1"/&gt;.&lt;/para&gt;

&lt;/preface&gt;

&lt;chapter id="ch1"&gt;
&lt;title&gt;First Chapter&lt;/title&gt;

&lt;para&gt;Irrelevant.&lt;/para&gt;

&lt;/chapter&gt;
&lt;/book&gt;</programlisting>

<para>will appear as:</para>

<informalexample>
<para>Normal: Chapter 1.</para>
<para>Title: Chapter 1, <emphasis>First Chapter</emphasis>.</para>
</informalexample>
</refsect1>

</refentry>

<refentry id="menuchoice.separator">
<refmeta>
<refentrytitle>menuchoice.separator</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>menuchoice.separator</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="menuchoice.separator.frag">&lt;xsl:param name="menuchoice.separator"
           select="'+'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Separator used to connect items of a <sgmltag>menuchoice</sgmltag> other
than <sgmltag>guimenuitem</sgmltag> and <sgmltag>guisubmenu</sgmltag>. The latter
elements are linked with <parameter moreinfo="none">menuchoice.menu.separator</parameter>.
</para>

</refsect1>
</refentry>

<refentry id="menuchoice.menu.separator">
<refmeta>
<refentrytitle>menuchoice.menu.separator</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>menuchoice.menu.separator</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="menuchoice.menu.separator.frag">&lt;xsl:param name="menuchoice.menu.separator"
           select="'-&gt;'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Separator used to connect items of a <sgmltag>menuchoice</sgmltag> with
<sgmltag>guimenuitem</sgmltag> or <sgmltag>guisubmenu</sgmltag>. Other elements
are linked with <parameter moreinfo="none">menuchoice.separator</parameter>.
</para>

</refsect1>
</refentry>

<refentry id="default.float.class">
<refmeta>
<refentrytitle>default.float.class</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.float.class</refname>
<refpurpose>Specifies the default float class</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="default.float.class.frag">&lt;xsl:param name="default.float.class"
           select="'before'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

<refentry id="footnote.number.format">
<refmeta>
<refentrytitle>footnote.number.format</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>footnote.number.format</refname>
<refpurpose>Identifies the format used for footnote numbers</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="footnote.number.format.frag">&lt;xsl:param name="footnote.number.format"
           select="'1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The <parameter moreinfo="none">footnote.number.format</parameter> specifies the format
to use for footnote numeration (1, i, I, a, or A).</para>

</refsect1>
</refentry>

<refentry id="table.footnote.number.format">
<refmeta>
<refentrytitle>table.footnote.number.format</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>table.footnote.number.format</refname>
<refpurpose>Identifies the format used for footnote numbers in tables</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.footnote.number.format.frag">&lt;xsl:param name="table.footnote.number.format"
           select="'a'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The <parameter moreinfo="none">table.footnote.number.format</parameter> specifies the format
to use for footnote numeration (1, i, I, a, or A) in tables.</para>

</refsect1>
</refentry>

<refentry id="footnote.number.symbols">
<refmeta>
<refentrytitle>footnote.number.symbols</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>footnote.number.symbols</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="footnote.number.symbols.frag">&lt;xsl:param name="footnote.number.symbols"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">footnote.number.symbols</parameter> is not the empty string,
footnotes will use the characters it contains as footnote symbols. For example,
<quote>*&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720;</quote> will identify
footnotes with <quote>*</quote>, <quote>†</quote>, <quote>‡</quote>,
<quote>◊</quote>, and <quote>✠</quote>. If there are more footnotes
than symbols, the stylesheets will fall back to numbered footnotes using
<parameter moreinfo="none">footnote.number.format</parameter>.</para>

<para>The use of symbols for footnotes depends on the ability of your
processor (or browser) to render the symbols you select. Not all systems are
capable of displaying the full range of Unicode characters. If the quoted characters
in the preceding paragraph are not displayed properly, that's a good indicator
that you may have trouble using those symbols for footnotes.</para>

</refsect1>
</refentry>

<refentry id="table.footnote.number.symbols">
<refmeta>
<refentrytitle>table.footnote.number.symbols</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>table.footnote.number.symbols</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="table.footnote.number.symbols.frag">&lt;xsl:param name="table.footnote.number.symbols"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If <parameter moreinfo="none">table.footnote.number.symbols</parameter> is not the empty string,
table footnotes will use the characters it contains as footnote symbols. For example,
<quote>*&amp;#x2020;&amp;#x2021;&amp;#x25CA;&amp;#x2720;</quote> will identify
footnotes with <quote>*</quote>, <quote>†</quote>, <quote>‡</quote>,
<quote>◊</quote>, and <quote>✠</quote>. If there are more footnotes
than symbols, the stylesheets will fall back to numbered footnotes using
<parameter moreinfo="none">table.footnote.number.format</parameter>.</para>

<para>The use of symbols for footnotes depends on the ability of your
processor (or browser) to render the symbols you select. Not all systems are
capable of displaying the full range of Unicode characters. If the quoted characters
in the preceding paragraph are not displayed properly, that's a good indicator
that you may have trouble using those symbols for footnotes.</para>

</refsect1>
</refentry>

<refentry id="xref.with.number.and.title">
<refmeta>
<refentrytitle>xref.with.number.and.title</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>xref.with.number.and.title</refname>
<refpurpose>Use number and title in cross references</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="xref.with.number.and.title.frag">&lt;xsl:param name="xref.with.number.and.title"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>FIXME:</para>

</refsect1>
</refentry>

</reference>

<reference><title>Graphics</title>
<refentry id="graphic.default.extension">
<refmeta>
<refentrytitle>graphic.default.extension</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>graphic.default.extension</refname>
<refpurpose>Default extension for graphic filenames</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="graphic.default.extension.frag">&lt;xsl:param name="graphic.default.extension"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If a <sgmltag>graphic</sgmltag> or <sgmltag>mediaobject</sgmltag>
includes a reference to a filename that does not include an extension,
and the <sgmltag class="attribute">format</sgmltag> attribute is
<emphasis>unspecified</emphasis>, the default extension will be used.
</para>

</refsect1>
</refentry>

<refentry id="default.image.width">
<refmeta>
<refentrytitle>default.image.width</refentrytitle>
<refmiscinfo role="type">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>default.image.width</refname>
<refpurpose>The default width of images</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="default.image.width.frag">&lt;xsl:param name="default.image.width"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If specified, this value will be used for the
<sgmltag class="attribute">width</sgmltag> attribute on
images that do not specify any
<ulink url="http://docbook.org/tdg/en/html/imagedata.html#viewport.area">viewport
dimensions</ulink>.</para>

</refsect1>
</refentry>

<refentry id="nominal.image.width">
<refmeta>
<refentrytitle>nominal.image.width</refentrytitle>
<refmiscinfo role="type">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nominal.image.width</refname>
<refpurpose>The nominal image width</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="nominal.image.width.frag">&lt;xsl:param name="nominal.image.width"
           select="6 * $pixels.per.inch"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Graphic widths expressed as a percentage are problematic. In the
following discussion, we speak of width and contentwidth, but
the same issues apply to depth and contentdepth.</para>

<para>A width of 50% means "half of the available space for the image."
That's fine. But note that in HTML, this is a dynamic property and
the image size will vary if the browser window is resized.</para>

<para>A contentwidth of 50% means "half of the actual image width".
But what does that mean if the stylesheets cannot assess the image's
actual size? Treating this as a width of 50% is one possibility, but
it produces behavior (dynamic scaling) that seems entirely out of
character with the meaning.</para>

<para>Instead, the stylesheets define a
<parameter moreinfo="none">nominal.image.width</parameter> and convert percentages to
actual values based on that nominal size.</para>

</refsect1>
</refentry>

<refentry id="nominal.image.depth">
<refmeta>
<refentrytitle>nominal.image.depth</refentrytitle>
<refmiscinfo role="type">length</refmiscinfo>
</refmeta>
<refnamediv>
<refname>nominal.image.depth</refname>
<refpurpose>Nominal image depth</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="nominal.image.depth.frag">&lt;xsl:param name="nominal.image.depth"
           select="4 * $pixels.per.inch"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>See <parameter moreinfo="none">nominal.image.width</parameter>.</para>

</refsect1>
</refentry>

<refentry id="use.embed.for.svg">
<refmeta>
<refentrytitle>use.embed.for.svg</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.embed.for.svg</refname>
<refpurpose>Use HTML <sgmltag>embed</sgmltag> for SVG?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="use.embed.for.svg.frag">&lt;xsl:param name="use.embed.for.svg"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, an <sgmltag>embed</sgmltag> element will be created for
SVG figures. An <sgmltag>object</sgmltag> is <emphasis>always</emphasis> created,
this parameter merely controls whether or not an additional <sgmltag>embed</sgmltag>
is generated inside the <sgmltag>object</sgmltag>.</para>

<para>On the plus side, this may be more portable among browsers and plug-ins.
On the minus side, it isn't valid HTML.</para>

</refsect1>
</refentry>

<refentry id="make.graphic.viewport">
<refmeta>
<refentrytitle>make.graphic.viewport</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>make.graphic.viewport</refname>
<refpurpose>Use tables in HTML to make viewports for graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="make.graphic.viewport.frag">&lt;xsl:param name="make.graphic.viewport"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The HTML <sgmltag>img</sgmltag> element only supports the notion
of content-area scaling; it doesn't support the distinction between a
content-area and a viewport-area, so we have to make some compromises.</para>

<para>If <parameter moreinfo="none">make.graphic.viewport</parameter> is non-zero, a table
will be used to frame the image. This creates an effective viewport-area.
</para>

<para>Tables and alignment don't work together, so this parameter is ignored
if alignment is specified on an image.</para>
</refsect1>
</refentry>

<refentry id="preferred.mediaobject.role">
<refmeta>
<refentrytitle>preferred.mediaobject.role</refentrytitle>
</refmeta>
<refnamediv>
<refname>preferred.mediaobject.role</refname>
<refpurpose>Select which mediaobject to use based on
this value of an object's <sgmltag class="attribute">role</sgmltag> attribute.
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="preferred.mediaobject.role.frag">&lt;xsl:param name="preferred.mediaobject.role"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>A mediaobject may contain several objects such as imageobjects.
If the parameter <parameter moreinfo="none">use.role.for.mediaobject</parameter>
is non-zero, then the <sgmltag class="attribute">role</sgmltag> attribute on
<sgmltag>imageobject</sgmltag>s and other objects within a <sgmltag>mediaobject</sgmltag> container will be used to select which object will be
used.  If one of the objects has a role value that matches the
preferred.mediaobject.role parameter, then it has first
priority for selection.  If more than one has such a
role value, the first one is used.
</para>
<para>
See the <parameter moreinfo="none">use.role.for.mediaobject</parameter> parameter
for the sequence of selection.</para>
</refsect1>
</refentry>

<refentry id="use.role.for.mediaobject">
<refmeta>
<refentrytitle>use.role.for.mediaobject</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>use.role.for.mediaobject</refname>
<refpurpose>Use <sgmltag class="attribute">role</sgmltag> attribute 
value for selecting which of several objects within a mediaobject to use.
</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="use.role.for.mediaobject.frag">&lt;xsl:param name="use.role.for.mediaobject"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, the <sgmltag class="attribute">role</sgmltag> attribute on
<sgmltag>imageobject</sgmltag>s or other objects within a <sgmltag>mediaobject</sgmltag> container will be used to select which object will be
used.
</para>
<para>
The order of selection when then parameter is non-zero is:
</para>
<orderedlist inheritnum="ignore" continuation="restarts">
<listitem>
    <para>If the stylesheet parameter <parameter moreinfo="none">preferred.mediaojbect.role</parameter> has a value, then the object whose role equals that value is selected.</para>
</listitem>
<listitem>
<para>Else if an object's role attribute has a value of
<literal moreinfo="none">html</literal> for HTML processing or
<literal moreinfo="none">fo</literal> for FO output, then the first
of such objects is selected.
</para>
</listitem>
<listitem>
<para>Else the first suitable object is selected.</para>
</listitem>
</orderedlist>
<para>
If the value of 
<parameter moreinfo="none">use.role.for.mediaobject</parameter>
is zero, then role attributes are not considered
and the first suitable object
with or without a role value is used.
</para>
</refsect1>
</refentry>

<refentry id="ignore.image.scaling">
<refmeta>
<refentrytitle>ignore.image.scaling</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>ignore.image.scaling</refname>
<refpurpose>Tell the stylesheets to ignore the author's image scaling attributes</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="ignore.image.scaling.frag">&lt;xsl:param name="ignore.image.scaling"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, the scaling attributes on graphics and media objects are
ignored.</para>

</refsect1>
</refentry>

</reference>

<reference><title>Chunking</title>
<refentry id="chunker.output.cdata-section-elements">
<refmeta>
<refentrytitle>chunker.output.cdata-section-elements</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.cdata-section-elements</refname>
<refpurpose>List of elements to escape with CDATA sections</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.cdata-section-elements" select="''"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the list of elements that should be escaped
as CDATA sections by the chunking stylesheet.  Not all processors support
specification of this parameter.
</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="chunker.output.doctype-public">
<refmeta>
<refentrytitle>chunker.output.doctype-public</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.doctype-public</refname>
<refpurpose>Public identifer to use in the document type of generated pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.doctype-public" select="''"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the public identifier that should be used by
the chunking stylesheet in the document type declaration of chunked pages.
Not all processors support specification of
this parameter.
</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="chunker.output.doctype-system">
<refmeta>
<refentrytitle>chunker.output.doctype-system</refentrytitle>
<refmiscinfo role="type">uri</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.doctype-system</refname>
<refpurpose>System identifier to use for the document type in generated pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.doctype-system" select="''"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the system identifier that should be used by
the chunking stylesheet in the document type declaration of chunked pages.
Not all processors support specification of
this parameter.
</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="chunker.output.encoding">
<refmeta>
<refentrytitle>chunker.output.encoding</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.encoding</refname>
<refpurpose>Encoding used in generated pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.encoding" select="'ISO-8859-1'"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the encoding to be used in files
generated by the chunking stylesheet. Not all processors support
specification of this parameter.
</para>

<para>This parameter used to be named <literal moreinfo="none">default.encoding</literal>.</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="chunker.output.indent">
<refmeta>
<refentrytitle>chunker.output.indent</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.indent</refname>
<refpurpose>Specification of indentation on generated pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.indent" select="'no'"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the value of the indent
specification for generated pages. Not all processors support
specification of this parameter.
</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="chunker.output.media-type">
<refmeta>
<refentrytitle>chunker.output.media-type</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.media-type</refname>
<refpurpose>Media type to use in generated pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.media-type" select="''"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the media type that should be used by
the chunking stylesheet. Not all processors support specification of
this parameter.
</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="chunker.output.method">
<refmeta>
<refentrytitle>chunker.output.method</refentrytitle>
<refmiscinfo role="type">list</refmiscinfo>
<refmiscinfo role="value">html</refmiscinfo>
<refmiscinfo role="value">xml</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.method</refname>
<refpurpose>Method used in generated pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.method" select="'html'"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the output method to be used in files
generated by the chunking stylesheet.
</para>

<para>This parameter used to be named <literal moreinfo="none">output.method</literal>.</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="chunker.output.omit-xml-declaration">
<refmeta>
<refentrytitle>chunker.output.omit-xml-declaration</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>chunker.output.omit-xml-declaration</refname>
<refpurpose>Omit-xml-declaration for generated pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.omit-xml-declaration" select="'no'"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the value of the omit-xml-declaration
specification for generated pages. Not all processors support
specification of this parameter.
</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="chunker.output.standalone">
<refmeta>
<refentrytitle>chunker.output.standalone</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunker.output.standalone</refname>
<refpurpose>Standalone declaration for generated pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="chunker.output.standalone" select="'no'"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter specifies the value of the standalone
specification for generated pages. Not all processors support
specification of this parameter.
</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="saxon.character.representation">
<refmeta>
<refentrytitle>saxon.character.representation</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>saxon.character.representation</refname>
<refpurpose>Saxon character representation used in generated HTML pages</refpurpose>
</refnamediv>

<refsynopsisdiv>&lt;xsl:param name="saxon.character.representation" select="'entity;decimal'"/&gt;
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This character representation is used in files generated by chunking stylesheet. If
you want to suppress entity references for characters with direct representation 
in default.encoding, set this parameter to value <literal moreinfo="none">native</literal>. 
</para>

<note>
<para>This parameter is documented here, but the declaration is actually
in the <filename moreinfo="none">chunker.xsl</filename> stylesheet module.</para>
</note>

</refsect1>
</refentry>

<refentry id="html.ext">
<refmeta>
<refentrytitle>html.ext</refentrytitle>

</refmeta>
<refnamediv>
<refname>html.ext</refname>
<refpurpose>Identifies the extension of generated HTML files</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.ext.frag">&lt;xsl:param name="html.ext"
           select="'.html'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The extension identified by <parameter moreinfo="none">html.ext</parameter> will
be used as the filename extension for chunks created by this stylesheet.
</para>

</refsect1>
</refentry>

<refentry id="html.extra.head.links">
<refmeta>
<refentrytitle>html.extra.head.links</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>html.extra.head.links</refname>
<refpurpose>Toggle extra HTML head link information</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="html.extra.head.links.frag">&lt;xsl:param name="html.extra.head.links"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, extra <sgmltag>link</sgmltag> elements will be
generated in the <sgmltag>head</sgmltag> of chunked HTML files. These
extra links point to chapters, appendixes, sections, etc. as supported
by the <quote>Site Navigation Bar</quote> in Mozilla 1.0 (as of CR1, at least).
</para>

</refsect1>
</refentry>

<refentry id="root.filename">
<refmeta>
<refentrytitle>root.filename</refentrytitle>

</refmeta>
<refnamediv>
<refname>root.filename</refname>
<refpurpose>Identifies the name of the root HTML file when chunking</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="root.filename.frag">&lt;xsl:param name="root.filename"
           select="'index'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The <parameter moreinfo="none">root.filename</parameter> is the base filename for
the chunk created for the root of each document processed.
</para>

</refsect1>
</refentry>

<refentry id="base.dir">
<refmeta>
<refentrytitle>base.dir</refentrytitle>

</refmeta>
<refnamediv>
<refname>base.dir</refname>
<refpurpose>The base directory of chunks</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="base.dir.frag">&lt;xsl:param name="base.dir"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If specified, the <literal moreinfo="none">base.dir</literal> identifies
the output directory for chunks. (If not specified, the output directory
is system dependent.)</para>

</refsect1>
</refentry>

<refentry id="generate.manifest">
  <refmeta>
    <refentrytitle>generate.manifest</refentrytitle>
    <refmiscinfo role="type">boolean</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>generate.manifest</refname>
    <refpurpose>Generate a manifest file?</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <src:fragment id="generate.manifest.frag">&lt;xsl:param name="generate.manifest"
           select="0"/&gt;</src:fragment>
  </refsynopsisdiv>

  <refsect1><title>Description</title>

    <para>If non-zero, a list of HTML files generated by the
      stylesheet transformation is written to the file named by
      the <parameter moreinfo="none">manifest</parameter> parameter.</para>

  </refsect1>
</refentry>

<refentry id="manifest">
  <refmeta>
    <refentrytitle>manifest</refentrytitle>
    <refmiscinfo role="type">string</refmiscinfo>
  </refmeta>
  <refnamediv>
    <refname>manifest</refname>
    <refpurpose>Name of manifest file</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <src:fragment id="manifest.frag">&lt;xsl:param name="manifest"
           select="'HTML.manifest'"/&gt;</src:fragment>
  </refsynopsisdiv>

  <refsect1><title>Description</title>

    <para>The name of the file to which a manifest is written (if the
      value of the <parameter moreinfo="none">generate.manifest</parameter> parameter
      is non-zero).</para>

  </refsect1>
</refentry>

<refentry id="chunk.toc">
<refmeta>
<refentrytitle>chunk.toc</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.toc</refname>
<refpurpose>An explicit TOC to be used for chunking</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="chunk.toc.frag">&lt;xsl:param name="chunk.toc"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The <parameter moreinfo="none">chunk.toc</parameter> identifies an explicit TOC that
will be used for chunking. This parameter is only used by the
<filename moreinfo="none">chunktoc.xsl</filename> stylesheet (and customization layers built
from it).</para>

</refsect1>
</refentry>

<refentry id="chunk.tocs.and.lots">
<refmeta>
<refentrytitle>chunk.tocs.and.lots</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.tocs.and.lots</refname>
<refpurpose>Should ToC and LoTs be in separate chunks?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="chunk.tocs.and.lots.frag">&lt;xsl:param name="chunk.tocs.and.lots"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, ToC and LoT (List of Examples, List of Figures, etc.)
will be put in a separate chunk. At the moment, this chunk is not in the
normal forward/backward navigation list. Instead, a new link is added to the
navigation footer.</para>

<para>This feature is still somewhat experimental. Feedback welcome.</para>

</refsect1>
</refentry>

<refentry id="chunk.section.depth">
<refmeta>
<refentrytitle>chunk.section.depth</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>chunk.section.depth</refname>
<refpurpose>Depth to which sections should be chunked</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="chunk.section.depth.frag">&lt;xsl:param name="chunk.section.depth"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter sets the depth of section chunking.</para>

</refsect1>
</refentry>

<refentry id="chunk.first.sections">
<refmeta>
<refentrytitle>chunk.first.sections</refentrytitle>

</refmeta>
<refnamediv>
<refname>chunk.first.sections</refname>
<refpurpose>Chunk the first top-level section?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="chunk.first.sections.frag">&lt;xsl:param name="chunk.first.sections"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, a chunk will be created for the first top-level
<sgmltag>sect1</sgmltag> or <sgmltag>section</sgmltag> elements in
each component. Otherwise, that section will be part of the chunk for
its parent.
</para>

</refsect1>
</refentry>

<refentry id="chunk.quietly">
<refmeta>
<refentrytitle>chunk.quietly</refentrytitle>

</refmeta>
<refnamediv>
<refname>chunk.quietly</refname>
<refpurpose>Omit the chunked filename messages.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="chunk.quietly.frag">&lt;xsl:param name="chunk.quietly"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If zero (the default), the XSL processor emits a message naming
each separate chunk filename as it is being output.
If nonzero, then the messages are suppressed.
</para>

</refsect1>
</refentry>

<refentry id="navig.graphics">
<refmeta>
<refentrytitle>navig.graphics</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navig.graphics</refname>
<refpurpose>Use graphics in navigational headers and footers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="navig.graphics.frag">&lt;xsl:param name="navig.graphics"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero), the navigational headers and footers in chunked
HTML are presented in an alternate style that uses
graphical icons for Next, Previous, Up, and Home.
Default graphics are provided in the distribution.
</para>

</refsect1>
</refentry>

<refentry id="navig.graphics.extension">
<refmeta>
<refentrytitle>navig.graphics.extension</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navig.graphics.extension</refname>
<refpurpose>Extension for navigational graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="navig.graphics.extension.frag">&lt;xsl:param name="navig.graphics.extension"
           select="'.gif'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Sets the filename extension to use on navigational graphics used
in the headers and footers of chunked HTML.</para>

</refsect1>
</refentry>

<refentry id="navig.graphics.path">
<refmeta>
<refentrytitle>navig.graphics.path</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navig.graphics.path</refname>
<refpurpose>Path to navigational graphics</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="navig.graphics.path.frag">&lt;xsl:param name="navig.graphics.path"&gt;images/&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Sets the path, probably relative to the directory where the HTML
files are created, to the navigational graphics used in the
headers and footers of chunked HTML.
</para>

</refsect1>
</refentry>

<refentry id="navig.showtitles">
<refmeta>
<refentrytitle>navig.showtitles</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>navig.showtitles</refname>
<refpurpose>Display titles in HTML headers and footers?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="navig.showtitles.frag">&lt;xsl:param name="navig.showtitles"&gt;1&lt;/xsl:param&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If true (non-zero),
the headers and footers of chunked HTML
display the titles of the next and previous chunks,
along with the words 'Next' and 'Previous' (or the
equivalent graphical icons if navig.graphics is true).
If false (zero), then only the words 'Next' and 'Previous'
(or the icons) are displayed.
</para>

</refsect1>
</refentry>

</reference>

<reference><title>Profiling</title>
<partintro>
<para>Following parameters can be used for attribute value based
profiling of your document. For more info about profiling look at
<ulink url="http://docbook.sourceforge.net/projects/xsl/doc/tools/profiling.html">http://docbook.sourceforge.net/projects/xsl/doc/tools/profiling.html</ulink>.</para>
</partintro>
<refentry id="profile.arch">
<refmeta>
<refentrytitle>profile.arch</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.arch</refname>
<refpurpose>Target profile for <sgmltag class="attribute">arch</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.arch.frag">&lt;xsl:param name="profile.arch"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.condition">
<refmeta>
<refentrytitle>profile.condition</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.condition</refname>
<refpurpose>Target profile for <sgmltag class="attribute">condition</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.condition.frag">&lt;xsl:param name="profile.condition"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.conformance">
<refmeta>
<refentrytitle>profile.conformance</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.conformance</refname>
<refpurpose>Target profile for <sgmltag class="attribute">conformance</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.conformance.frag">&lt;xsl:param name="profile.conformance"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.lang">
<refmeta>
<refentrytitle>profile.lang</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.lang</refname>
<refpurpose>Target profile for <sgmltag class="attribute">lang</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.lang.frag">&lt;xsl:param name="profile.lang"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.os">
<refmeta>
<refentrytitle>profile.os</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.os</refname>
<refpurpose>Target profile for <sgmltag class="attribute">os</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.os.frag">&lt;xsl:param name="profile.os"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.revision">
<refmeta>
<refentrytitle>profile.revision</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.revision</refname>
<refpurpose>Target profile for <sgmltag class="attribute">revision</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.revision.frag">&lt;xsl:param name="profile.revision"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.revisionflag">
<refmeta>
<refentrytitle>profile.revisionflag</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.revisionflag</refname>
<refpurpose>Target profile for <sgmltag class="attribute">revisionflag</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.revisionflag.frag">&lt;xsl:param name="profile.revisionflag"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.role">
<refmeta>
<refentrytitle>profile.role</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.role</refname>
<refpurpose>Target profile for <sgmltag class="attribute">role</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.role.frag">&lt;xsl:param name="profile.role"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

<warning>
<para>Note that <sgmltag class="attribute">role</sgmltag> is often
used for other purposes than profiling. For example it is commonly
used to get emphasize in bold font:</para>

<programlisting format="linespecific">&lt;emphasis role="bold"&gt;very important&lt;/emphasis&gt;</programlisting>

<para>If you are using <sgmltag class="attribute">role</sgmltag> for
these purposes do not forget to add values like <literal moreinfo="none">bold</literal> to
value of this parameter. If you forgot you will get document with
small pieces missing which are very hard to track.</para>

<para>For this reason it is not recommended to use <sgmltag class="attribute">role</sgmltag> attribute for profiling. You should
rather use profiling specific attributes like <sgmltag class="attribute">userlevel</sgmltag>, <sgmltag class="attribute">os</sgmltag>, <sgmltag class="attribute">arch</sgmltag>, <sgmltag class="attribute">condition</sgmltag>, etc.</para>
</warning>

</refsect1>
</refentry>

<refentry id="profile.security">
<refmeta>
<refentrytitle>profile.security</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.security</refname>
<refpurpose>Target profile for <sgmltag class="attribute">security</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.security.frag">&lt;xsl:param name="profile.security"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.userlevel">
<refmeta>
<refentrytitle>profile.userlevel</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.userlevel</refname>
<refpurpose>Target profile for <sgmltag class="attribute">userlevel</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.userlevel.frag">&lt;xsl:param name="profile.userlevel"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.vendor">
<refmeta>
<refentrytitle>profile.vendor</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.vendor</refname>
<refpurpose>Target profile for <sgmltag class="attribute">vendor</sgmltag>
attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.vendor.frag">&lt;xsl:param name="profile.vendor"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.attribute">
<refmeta>
<refentrytitle>profile.attribute</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.attribute</refname>
<refpurpose>Name of user-specified profiling attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.attribute.frag">&lt;xsl:param name="profile.attribute"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter is used in conjuction with <link linkend="profile.value"><parameter moreinfo="none">profile.value</parameter></link>.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.value">
<refmeta>
<refentrytitle>profile.value</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.value</refname>
<refpurpose>Target profile for user-specified attribute</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.value.frag">&lt;xsl:param name="profile.value"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>When you are using this parameter you must also specify name of
profiling attribute with parameter <link linkend="profile.attribute"><parameter moreinfo="none">profile.attribute</parameter></link>.</para>

<para>Value of this parameter specifies profiles which should be
included in the output. You can specify multiple profiles by
separating them by semicolon. You can change separator character by
<link linkend="profile.separator"><parameter moreinfo="none">profile.separator</parameter></link>
parameter.</para>

<para>This parameter has effect only when you are using profiling
stylesheets (<filename moreinfo="none">profile-docbook.xsl</filename>,
<filename moreinfo="none">profile-chunk.xsl</filename>, …) instead of normal
ones (<filename moreinfo="none">docbook.xsl</filename>,
<filename moreinfo="none">chunk.xsl</filename>, …).</para>

</refsect1>
</refentry>

<refentry id="profile.separator">
<refmeta>
<refentrytitle>profile.separator</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>profile.separator</refname>
<refpurpose>Separator character for compound profile values</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="profile.separator.frag">&lt;xsl:param name="profile.separator"
           select="';'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Separator character for compound profile values.</para>

</refsect1>
</refentry>

</reference>

<reference><title>HTML Help</title>
<refentry id="htmlhelp.encoding">
<refmeta>
<refentrytitle>htmlhelp.encoding</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.encoding</refname>
<refpurpose>Character encoding to use in files for HTML Help compiler.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.encoding.frag">&lt;xsl:param name="htmlhelp.encoding"
           select="'iso-8859-1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>HTML Help Compiler is not UTF-8 aware, so you should always use
apropriate single-byte encoding here.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.autolabel">
<refmeta>
<refentrytitle>htmlhelp.autolabel</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.autolabel</refname>
<refpurpose>Should tree-like ToC use autonumbering feature?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.autolabel.frag">&lt;xsl:param name="htmlhelp.autolabel"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want to include chapter and section numbers into ToC in
the left panel, set this parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.chm">
<refmeta>
<refentrytitle>htmlhelp.chm</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.chm</refname>
<refpurpose>Filename of output HTML Help file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.chm.frag">&lt;xsl:param name="htmlhelp.chm"
           select="'htmlhelp.chm'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Change this parameter if you want different name of result
CHM file than htmlhelp.chm.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.default.topic">
<refmeta>
<refentrytitle>htmlhelp.default.topic</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.default.topic</refname>
<refpurpose>Name of file with default topic</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.default.topic.frag">&lt;xsl:param name="htmlhelp.default.topic"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Normally first chunk of document is displayed when you open HTML
Help file. If you want to display another topic, simply set its
filename by this parameter.</para>

<para>This is useful especially if you don't generate ToC in front of
your document and you also hide root element in ToC. E.g.:</para>

<programlisting format="linespecific">&lt;xsl:param name="generate.book.toc" select="0"/&gt;
&lt;xsl:param name="htmlhelp.hhc.show.root" select="0"/&gt;
&lt;xsl:param name="htmlhelp.default.topic" select="'pr01.html'"/&gt;</programlisting>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhp">
<refmeta>
<refentrytitle>htmlhelp.hhp</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhp</refname>
<refpurpose>Filename of project file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhp.frag">&lt;xsl:param name="htmlhelp.hhp"
           select="'htmlhelp.hhp'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Change this parameter if you want different name of project
file than htmlhelp.hhp.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhc">
<refmeta>
<refentrytitle>htmlhelp.hhc</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc</refname>
<refpurpose>Filename of TOC file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhc.frag">&lt;xsl:param name="htmlhelp.hhc"
           select="'toc.hhc'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Change this parameter if you want different name of TOC file
than toc.hhc.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhk">
<refmeta>
<refentrytitle>htmlhelp.hhk</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhk</refname>
<refpurpose>Filename of index file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhk.frag">&lt;xsl:param name="htmlhelp.hhk"
           select="'index.hhk'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Change this parameter if you want different name of index file
than index.hhk.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhp.tail">
<refmeta>
<refentrytitle>htmlhelp.hhp.tail</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhp.tail</refname>
<refpurpose>Additional content for project file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhp.tail.frag">&lt;xsl:param name="htmlhelp.hhp.tail"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want to include some additional parameters into project file,
store appropriate part of project file into this parameter.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhp.window">
<refmeta>
<refentrytitle>htmlhelp.hhp.window</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhp.window</refname>
<refpurpose>Name of default window.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhp.window.frag">&lt;xsl:param name="htmlhelp.hhp.window"
           select="'Main'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Name of default window. If empty no [WINDOWS] section will be
added to project file.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.enumerate.images">
<refmeta>
<refentrytitle>htmlhelp.enumerate.images</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.enumerate.images</refname>
<refpurpose>Should be paths to all used images added to project file?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.enumerate.images.frag">&lt;xsl:param name="htmlhelp.enumerate.images"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>You should turn on this flag, if you insert images into your documents 
as external binary entities or if you are using absolute path in image names.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.force.map.and.alias">
<refmeta>
<refentrytitle>htmlhelp.force.map.and.alias</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.force.map.and.alias</refname>
<refpurpose>Should be [MAP] and [ALIAS] section added to project file unconditionaly?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.force.map.and.alias.frag">&lt;xsl:param name="htmlhelp.force.map.and.alias"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>You should turn on this flag, if you have your own
<filename moreinfo="none">alias.h</filename> and <filename moreinfo="none">contex.h</filename> files
and you want include reference to them in project file.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.map.file">
<refmeta>
<refentrytitle>htmlhelp.map.file</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.map.file</refname>
<refpurpose>Filename of map file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.map.file.frag">&lt;xsl:param name="htmlhelp.map.file"
           select="'context.h'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Change this parameter if you want different name of map file
than <filename moreinfo="none">context.h</filename>.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.alias.file">
<refmeta>
<refentrytitle>htmlhelp.alias.file</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.alias.file</refname>
<refpurpose>Filename of map file.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.alias.file.frag">&lt;xsl:param name="htmlhelp.alias.file"
           select="'alias.h'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Change this parameter if you want different name of map file
than <filename moreinfo="none">alias.h</filename>.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhc.section.depth">
<refmeta>
<refentrytitle>htmlhelp.hhc.section.depth</refentrytitle>
<refmiscinfo role="type">integer</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.section.depth</refname>
<refpurpose>Depth of TOC for sections in a left pane.</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhc.section.depth.frag">&lt;xsl:param name="htmlhelp.hhc.section.depth"
           select="5"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Change this parameter if you want shallower ToC in a left pane
of HTML Help viewer.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhc.show.root">
<refmeta>
<refentrytitle>htmlhelp.hhc.show.root</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.show.root</refname>
<refpurpose>Should be entry for root element shown in ToC?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhc.show.root.frag">&lt;xsl:param name="htmlhelp.hhc.show.root"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If set to 0, there will be no entry for root element in
ToC. This is useful when you want provide user with expanded ToC as
a default.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhc.folders.instead.books">
<refmeta>
<refentrytitle>htmlhelp.hhc.folders.instead.books</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.folders.instead.books</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhc.folders.instead.books.frag">&lt;xsl:param name="htmlhelp.hhc.folders.instead.books"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parameter controls whether there should be folder-like
icons (1) or book-like icons (0) in ToC.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.hhc.binary">
<refmeta>
<refentrytitle>htmlhelp.hhc.binary</refentrytitle>
<refmiscinfo role="type"/>
</refmeta>
<refnamediv>
<refname>htmlhelp.hhc.binary</refname>
<refpurpose/>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.hhc.binary.frag">&lt;xsl:param name="htmlhelp.hhc.binary"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>This parametr controls whether binary TOC will be generated. You
must create binary TOC if you want to add Prev/Next buttons to toolbar
(which is default behaviour). Files with binary TOC can't be merged.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.title">
<refmeta>
<refentrytitle>htmlhelp.title</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.title</refname>
<refpurpose>Title of HTML Help</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.title.frag">&lt;xsl:param name="htmlhelp.title"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Content of this parameter will be used as a title for generated
HTML Help. If empty, title will be automatically taken from document.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.show.menu">
<refmeta>
<refentrytitle>htmlhelp.show.menu</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.show.menu</refname>
<refpurpose>Should be menu shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.show.menu.frag">&lt;xsl:param name="htmlhelp.show.menu"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want application menu in your HTML Help file, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.show.advanced.search">
<refmeta>
<refentrytitle>htmlhelp.show.advanced.search</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.show.advanced.search</refname>
<refpurpose>Should be advanced search available?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.show.advanced.search.frag">&lt;xsl:param name="htmlhelp.show.advanced.search"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want advanced search features in your help, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.show.favorities">
<refmeta>
<refentrytitle>htmlhelp.show.favorities</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.show.favorities</refname>
<refpurpose>Should be favorities tab shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.show.favorities.frag">&lt;xsl:param name="htmlhelp.show.favorities"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want favorities tab shown in your help, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.hideshow">
<refmeta>
<refentrytitle>htmlhelp.button.hideshow</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.hideshow</refname>
<refpurpose>Should be Hide/Show button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.hideshow.frag">&lt;xsl:param name="htmlhelp.button.hideshow"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Hide/Show button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.back">
<refmeta>
<refentrytitle>htmlhelp.button.back</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.back</refname>
<refpurpose>Should be Back button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.back.frag">&lt;xsl:param name="htmlhelp.button.back"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Back button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.forward">
<refmeta>
<refentrytitle>htmlhelp.button.forward</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.forward</refname>
<refpurpose>Should be Forward button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.forward.frag">&lt;xsl:param name="htmlhelp.button.forward"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Forward button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.stop">
<refmeta>
<refentrytitle>htmlhelp.button.stop</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.stop</refname>
<refpurpose>Should be Stop button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.stop.frag">&lt;xsl:param name="htmlhelp.button.stop"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Stop button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.refresh">
<refmeta>
<refentrytitle>htmlhelp.button.refresh</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.refresh</refname>
<refpurpose>Should be Refresh button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.refresh.frag">&lt;xsl:param name="htmlhelp.button.refresh"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Refresh button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.home">
<refmeta>
<refentrytitle>htmlhelp.button.home</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.home</refname>
<refpurpose>Should be Home button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.home.frag">&lt;xsl:param name="htmlhelp.button.home"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Home button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.home.url">
<refmeta>
<refentrytitle>htmlhelp.button.home.url</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.home.url</refname>
<refpurpose>URL address of page accessible by Home button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.home.url.frag">&lt;xsl:param name="htmlhelp.button.home.url"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>URL address of page accessible by Home button.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.options">
<refmeta>
<refentrytitle>htmlhelp.button.options</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.options</refname>
<refpurpose>Should be Options button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.options.frag">&lt;xsl:param name="htmlhelp.button.options"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Options button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.print">
<refmeta>
<refentrytitle>htmlhelp.button.print</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.print</refname>
<refpurpose>Should be Print button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.print.frag">&lt;xsl:param name="htmlhelp.button.print"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Print button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.locate">
<refmeta>
<refentrytitle>htmlhelp.button.locate</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.locate</refname>
<refpurpose>Should be Locate button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.locate.frag">&lt;xsl:param name="htmlhelp.button.locate"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Locate button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.jump1">
<refmeta>
<refentrytitle>htmlhelp.button.jump1</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump1</refname>
<refpurpose>Should be Jump1 button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.jump1.frag">&lt;xsl:param name="htmlhelp.button.jump1"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Jump1 button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.jump1.url">
<refmeta>
<refentrytitle>htmlhelp.button.jump1.url</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump1.url</refname>
<refpurpose>URL address of page accessible by Jump1 button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.jump1.url.frag">&lt;xsl:param name="htmlhelp.button.jump1.url"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>URL address of page accessible by Jump1 button.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.jump1.title">
<refmeta>
<refentrytitle>htmlhelp.button.jump1.title</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump1.title</refname>
<refpurpose>Title of Jump1 button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.jump1.title.frag">&lt;xsl:param name="htmlhelp.button.jump1.title"
           select="'User1'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Title of Jump1 button.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.jump2">
<refmeta>
<refentrytitle>htmlhelp.button.jump2</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump2</refname>
<refpurpose>Should be Jump2 button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.jump2.frag">&lt;xsl:param name="htmlhelp.button.jump2"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Jump2 button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.jump2.url">
<refmeta>
<refentrytitle>htmlhelp.button.jump2.url</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump2.url</refname>
<refpurpose>URL address of page accessible by Jump2 button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.jump2.url.frag">&lt;xsl:param name="htmlhelp.button.jump2.url"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>URL address of page accessible by Jump2 button.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.jump2.title">
<refmeta>
<refentrytitle>htmlhelp.button.jump2.title</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.jump2.title</refname>
<refpurpose>Title of Jump2 button</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.jump2.title.frag">&lt;xsl:param name="htmlhelp.button.jump2.title"
           select="'User2'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>Title of Jump2 button.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.next">
<refmeta>
<refentrytitle>htmlhelp.button.next</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.next</refname>
<refpurpose>Should be Next button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.next.frag">&lt;xsl:param name="htmlhelp.button.next"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Next button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.prev">
<refmeta>
<refentrytitle>htmlhelp.button.prev</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.prev</refname>
<refpurpose>Should be Prev button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.prev.frag">&lt;xsl:param name="htmlhelp.button.prev"
           select="1"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Prev button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.button.zoom">
<refmeta>
<refentrytitle>htmlhelp.button.zoom</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.button.zoom</refname>
<refpurpose>Should be Zoom button shown?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.button.zoom.frag">&lt;xsl:param name="htmlhelp.button.zoom"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want Zoom button shown on toolbar, turn this
parameter to 1.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.use.hhk">
<refmeta>
<refentrytitle>htmlhelp.use.hhk</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.use.hhk</refname>
<refpurpose>Should be index built using HHK file?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.use.hhk.frag">&lt;xsl:param name="htmlhelp.use.hhk"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, index is created using HHK file. This provides some
new features.</para>

</refsect1>
</refentry>

<refentry id="htmlhelp.only">
<refmeta>
<refentrytitle>htmlhelp.only</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>htmlhelp.only</refname>
<refpurpose>Should be only project files generated?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="htmlhelp.only.frag">&lt;xsl:param name="htmlhelp.only"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If you want to play with various HTML Help parameters and you
don't need to regenerate all HTML files, you can set this parameter to
1. This setting will not process whole document, only project files
(hhp, hhc, hhk,...) will be generated.</para>

</refsect1>
</refentry>

</reference>

<reference><title>Localization</title>
<refentry id="l10n.gentext.language">
<refmeta>
<refentrytitle>l10n.gentext.language</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.gentext.language</refname>
<refpurpose>Sets the gentext language</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="l10n.gentext.language.frag">&lt;xsl:param name="l10n.gentext.language"
           select="''"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If this parameter is set to any value other than the empty string, its
value will be used as the value for the language when generating text. Setting
<parameter moreinfo="none">l10n.gentext.language</parameter> overrides any settings within the
document being formatted.</para>

<para>It's much more likely that you might want to set the
<parameter moreinfo="none">l10n.gentext.default.language</parameter> parameter.</para>

</refsect1>
</refentry>

<refentry id="l10n.gentext.default.language">
<refmeta>
<refentrytitle>l10n.gentext.default.language</refentrytitle>
<refmiscinfo role="type">string</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.gentext.default.language</refname>
<refpurpose>Sets the default language for generated text</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="l10n.gentext.default.language.frag">&lt;xsl:param name="l10n.gentext.default.language"
           select="'en'"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>The value of the <parameter moreinfo="none">l10n.gentext.default.language</parameter>
parameter is used as the language for generated text if no setting is provided
in the source document.</para>

</refsect1>
</refentry>

<refentry id="l10n.gentext.use.xref.language">
<refmeta>
<refentrytitle>l10n.gentext.use.xref.language</refentrytitle>
<refmiscinfo role="type">boolean</refmiscinfo>
</refmeta>
<refnamediv>
<refname>l10n.gentext.use.xref.language</refname>
<refpurpose>Use the language of target when generating cross-reference text?</refpurpose>
</refnamediv>

<refsynopsisdiv>
<src:fragment id="l10n.gentext.use.xref.language.frag">&lt;xsl:param name="l10n.gentext.use.xref.language"
           select="0"/&gt;</src:fragment>
</refsynopsisdiv>

<refsect1><title>Description</title>

<para>If non-zero, the language of the target will be used when
generating cross reference text. Usually, the <quote>current</quote>
language is used when generating text (that is, the language of the
element that contains the cross-reference element). But setting this parameter
allows the language of the element <emphasis>pointed to</emphasis> to control
the generated text.</para>

<para>Consider the following example:</para>

<informalexample>
<programlisting format="linespecific">&lt;para lang="en"&gt;See also &lt;xref linkend="chap3"/&gt;.&lt;/para&gt;
</programlisting>
</informalexample>

<para>Suppose that Chapter 3 happens to be written in German.
If <parameter moreinfo="none">l10n.gentext.use.xref.language</parameter> is non-zero, the
resulting text will be something like this:</para>

<blockquote>
<para>See also Kapital 3.</para>
</blockquote>

<para>Where the more traditional rendering would be:</para>

<blockquote>
<para>See also Chapter 3.</para>
</blockquote>

</refsect1>
</refentry>

</reference>

<appendix><title>The Stylesheet</title>

<para>The <filename moreinfo="none">param.xsl</filename> stylesheet is just a wrapper
around all these parameters.</para>

<src:fragment id="top">
&lt;!-- This file is generated from param.xweb; do not edit this file! --&gt;

&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                exclude-result-prefixes="src"
                version="1.0"&gt;

&lt;!-- ********************************************************************
     $Id: param.xml,v 1.2 2003-03-09 14:56:38 tom Exp $
     ********************************************************************

     This file is part of the XSL DocBook Stylesheet distribution.
     See ../README or http://nwalsh.com/docbook/xsl/ for copyright
     and other information.

     ******************************************************************** --&gt;

<src:fragref linkend="admon.graphics.extension.frag"/>
<src:fragref linkend="admon.graphics.frag"/>
<src:fragref linkend="admon.graphics.path.frag"/>
<src:fragref linkend="admon.style.frag"/>
<src:fragref linkend="annotate.toc.frag"/>
<src:fragref linkend="appendix.autolabel.frag"/>
<src:fragref linkend="author.othername.in.middle.frag"/>
<src:fragref linkend="autotoc.label.separator.frag"/>
<src:fragref linkend="base.dir.frag"/>
<src:fragref linkend="biblioentry.item.separator.frag"/>
<src:fragref linkend="bibliography.collection.frag"/>
<src:fragref linkend="bibliography.numbered.frag"/>
<src:fragref linkend="bridgehead.in.toc.frag"/>
<src:fragref linkend="callout.defaultcolumn.frag"/>
<src:fragref linkend="callout.graphics.extension.frag"/>
<src:fragref linkend="callout.graphics.frag"/>
<src:fragref linkend="callout.graphics.number.limit.frag"/>
<src:fragref linkend="callout.graphics.path.frag"/>
<src:fragref linkend="callout.list.table.frag"/>
<src:fragref linkend="callout.unicode.frag"/>
<src:fragref linkend="callout.unicode.number.limit.frag"/>
<src:fragref linkend="callout.unicode.start.character.frag"/>
<src:fragref linkend="callouts.extension.frag"/>
<src:fragref linkend="chapter.autolabel.frag"/>
<src:fragref linkend="chunk.first.sections.frag"/>
<src:fragref linkend="chunk.quietly.frag"/>
<src:fragref linkend="chunk.section.depth.frag"/>
<src:fragref linkend="chunk.toc.frag"/>
<src:fragref linkend="chunk.tocs.and.lots.frag"/>
<src:fragref linkend="citerefentry.link.frag"/>
<src:fragref linkend="collect.xref.targets.frag"/>
<src:fragref linkend="css.decoration.frag"/>
<src:fragref linkend="current.docid.frag"/>
<src:fragref linkend="default.float.class.frag"/>
<src:fragref linkend="default.image.width.frag"/>
<src:fragref linkend="default.table.width.frag"/>
<src:fragref linkend="draft.watermark.image.frag"/>
<src:fragref linkend="ebnf.table.bgcolor.frag"/>
<src:fragref linkend="ebnf.table.border.frag"/>
<src:fragref linkend="emphasis.propagates.style.frag"/>
<src:fragref linkend="entry.propagates.style.frag"/>
<src:fragref linkend="firstterm.only.link.frag"/>
<src:fragref linkend="footer.rule.frag"/>
<src:fragref linkend="footnote.number.format.frag"/>
<src:fragref linkend="footnote.number.symbols.frag"/>
<src:fragref linkend="formal.procedures.frag"/>
<src:fragref linkend="formal.title.placement.frag"/>
<src:fragref linkend="funcsynopsis.decoration.frag"/>
<src:fragref linkend="funcsynopsis.style.frag"/>
<src:fragref linkend="funcsynopsis.tabular.threshold.frag"/>
<src:fragref linkend="function.parens.frag"/>
<src:fragref linkend="generate.id.attributes.frag"/>
<src:fragref linkend="generate.index.frag"/>
<src:fragref linkend="generate.legalnotice.link.frag"/>
<src:fragref linkend="generate.manifest.frag"/>
<src:fragref linkend="generate.meta.abstract.frag"/>
<src:fragref linkend="generate.section.toc.level.frag"/>
<src:fragref linkend="generate.toc.frag"/>
<src:fragref linkend="glossary.collection.frag"/>
<src:fragref linkend="glossentry.show.acronym.frag"/>
<src:fragref linkend="glossterm.auto.link.frag"/>
<src:fragref linkend="graphic.default.extension.frag"/>
<src:fragref linkend="graphicsize.extension.frag"/>
<src:fragref linkend="header.rule.frag"/>
<src:fragref linkend="html.base.frag"/>
<src:fragref linkend="html.cellpadding.frag"/>
<src:fragref linkend="html.cellspacing.frag"/>
<src:fragref linkend="html.cleanup.frag"/>
<src:fragref linkend="html.ext.frag"/>
<src:fragref linkend="html.extra.head.links.frag"/>
<src:fragref linkend="html.longdesc.frag"/>
<src:fragref linkend="html.longdesc.link.frag"/>
<src:fragref linkend="html.stylesheet.frag"/>
<src:fragref linkend="html.stylesheet.type.frag"/>
<src:fragref linkend="htmlhelp.alias.file.frag"/>
<src:fragref linkend="htmlhelp.autolabel.frag"/>
<src:fragref linkend="htmlhelp.button.back.frag"/>
<src:fragref linkend="htmlhelp.button.forward.frag"/>
<src:fragref linkend="htmlhelp.button.hideshow.frag"/>
<src:fragref linkend="htmlhelp.button.home.frag"/>
<src:fragref linkend="htmlhelp.button.home.url.frag"/>
<src:fragref linkend="htmlhelp.button.jump1.frag"/>
<src:fragref linkend="htmlhelp.button.jump1.title.frag"/>
<src:fragref linkend="htmlhelp.button.jump1.url.frag"/>
<src:fragref linkend="htmlhelp.button.jump2.frag"/>
<src:fragref linkend="htmlhelp.button.jump2.title.frag"/>
<src:fragref linkend="htmlhelp.button.jump2.url.frag"/>
<src:fragref linkend="htmlhelp.button.locate.frag"/>
<src:fragref linkend="htmlhelp.button.next.frag"/>
<src:fragref linkend="htmlhelp.button.options.frag"/>
<src:fragref linkend="htmlhelp.button.prev.frag"/>
<src:fragref linkend="htmlhelp.button.print.frag"/>
<src:fragref linkend="htmlhelp.button.refresh.frag"/>
<src:fragref linkend="htmlhelp.button.stop.frag"/>
<src:fragref linkend="htmlhelp.button.zoom.frag"/>
<src:fragref linkend="htmlhelp.chm.frag"/>
<src:fragref linkend="htmlhelp.default.topic.frag"/>
<src:fragref linkend="htmlhelp.encoding.frag"/>
<src:fragref linkend="htmlhelp.enumerate.images.frag"/>
<src:fragref linkend="htmlhelp.force.map.and.alias.frag"/>
<src:fragref linkend="htmlhelp.hhc.binary.frag"/>
<src:fragref linkend="htmlhelp.hhc.folders.instead.books.frag"/>
<src:fragref linkend="htmlhelp.hhc.frag"/>
<src:fragref linkend="htmlhelp.hhc.section.depth.frag"/>
<src:fragref linkend="htmlhelp.hhc.show.root.frag"/>
<src:fragref linkend="htmlhelp.hhk.frag"/>
<src:fragref linkend="htmlhelp.hhp.frag"/>
<src:fragref linkend="htmlhelp.hhp.tail.frag"/>
<src:fragref linkend="htmlhelp.hhp.window.frag"/>
<src:fragref linkend="htmlhelp.map.file.frag"/>
<src:fragref linkend="htmlhelp.only.frag"/>
<src:fragref linkend="htmlhelp.show.advanced.search.frag"/>
<src:fragref linkend="htmlhelp.show.favorities.frag"/>
<src:fragref linkend="htmlhelp.show.menu.frag"/>
<src:fragref linkend="htmlhelp.title.frag"/>
<src:fragref linkend="htmlhelp.use.hhk.frag"/>
<src:fragref linkend="ignore.image.scaling.frag"/>
<src:fragref linkend="inherit.keywords.frag"/>
<src:fragref linkend="l10n.gentext.default.language.frag"/>
<src:fragref linkend="l10n.gentext.language.frag"/>
<src:fragref linkend="l10n.gentext.use.xref.language.frag"/>
<src:fragref linkend="label.from.part.frag"/>
<src:fragref linkend="linenumbering.everyNth.frag"/>
<src:fragref linkend="linenumbering.extension.frag"/>
<src:fragref linkend="linenumbering.separator.frag"/>
<src:fragref linkend="linenumbering.width.frag"/>
<src:fragref linkend="link.mailto.url.frag"/>
<src:fragref linkend="make.graphic.viewport.frag"/>
<src:fragref linkend="make.single.year.ranges.frag"/>
<src:fragref linkend="make.valid.html.frag"/>
<src:fragref linkend="make.year.ranges.frag"/>
<src:fragref linkend="manifest.frag"/>
<src:fragref linkend="manual.toc.frag"/>
<src:fragref linkend="menuchoice.menu.separator.frag"/>
<src:fragref linkend="menuchoice.separator.frag"/>
<src:fragref linkend="navig.graphics.extension.frag"/>
<src:fragref linkend="navig.graphics.frag"/>
<src:fragref linkend="navig.graphics.path.frag"/>
<src:fragref linkend="navig.showtitles.frag"/>
<src:fragref linkend="nominal.image.depth.frag"/>
<src:fragref linkend="nominal.image.width.frag"/>
<src:fragref linkend="nominal.table.width.frag"/>
<src:fragref linkend="olink.base.uri.frag"/>
<src:fragref linkend="olink.doctitle.frag"/>
<src:fragref linkend="olink.fragid.frag"/>
<src:fragref linkend="olink.outline.ext.frag"/>
<src:fragref linkend="olink.pubid.frag"/>
<src:fragref linkend="olink.resolver.frag"/>
<src:fragref linkend="olink.sysid.frag"/>
<src:fragref linkend="para.propagates.style.frag"/>
<src:fragref linkend="part.autolabel.frag"/>
<src:fragref linkend="phrase.propagates.style.frag"/>
<src:fragref linkend="pixels.per.inch.frag"/>
<src:fragref linkend="points.per.em.frag"/>
<src:fragref linkend="preface.autolabel.frag"/>
<src:fragref linkend="preferred.mediaobject.role.frag"/>
<src:fragref linkend="process.empty.source.toc.frag"/>
<src:fragref linkend="process.source.toc.frag"/>
<src:fragref linkend="profile.arch.frag"/>
<src:fragref linkend="profile.attribute.frag"/>
<src:fragref linkend="profile.condition.frag"/>
<src:fragref linkend="profile.conformance.frag"/>
<src:fragref linkend="profile.lang.frag"/>
<src:fragref linkend="profile.os.frag"/>
<src:fragref linkend="profile.revision.frag"/>
<src:fragref linkend="profile.revisionflag.frag"/>
<src:fragref linkend="profile.role.frag"/>
<src:fragref linkend="profile.security.frag"/>
<src:fragref linkend="profile.separator.frag"/>
<src:fragref linkend="profile.userlevel.frag"/>
<src:fragref linkend="profile.value.frag"/>
<src:fragref linkend="profile.vendor.frag"/>
<src:fragref linkend="punct.honorific.frag"/>
<src:fragref linkend="qanda.defaultlabel.frag"/>
<src:fragref linkend="qanda.inherit.numeration.frag"/>
<src:fragref linkend="qandadiv.autolabel.frag"/>
<src:fragref linkend="refentry.generate.name.frag"/>
<src:fragref linkend="refentry.generate.title.frag"/>
<src:fragref linkend="refentry.separator.frag"/>
<src:fragref linkend="refentry.xref.manvolnum.frag"/>
<src:fragref linkend="root.filename.frag"/>
<src:fragref linkend="rootid.frag"/>
<src:fragref linkend="runinhead.default.title.end.punct.frag"/>
<src:fragref linkend="runinhead.title.end.punct.frag"/>
<src:fragref linkend="section.autolabel.frag"/>
<src:fragref linkend="section.label.includes.component.label.frag"/>
<src:fragref linkend="segmentedlist.as.table.frag"/>
<src:fragref linkend="shade.verbatim.frag"/>
<src:fragref linkend="shade.verbatim.style.frag"/>
<src:fragref linkend="show.comments.frag"/>
<src:fragref linkend="show.revisionflag.frag"/>
<src:fragref linkend="spacing.paras.frag"/>
<src:fragref linkend="suppress.footer.navigation.frag"/>
<src:fragref linkend="suppress.header.navigation.frag"/>
<src:fragref linkend="suppress.navigation.frag"/>
<src:fragref linkend="table.borders.with.css.frag"/>
<src:fragref linkend="table.cell.border.color.frag"/>
<src:fragref linkend="table.cell.border.style.frag"/>
<src:fragref linkend="table.cell.border.thickness.frag"/>
<src:fragref linkend="table.footnote.number.format.frag"/>
<src:fragref linkend="table.footnote.number.symbols.frag"/>
<src:fragref linkend="table.frame.border.color.frag"/>
<src:fragref linkend="table.frame.border.style.frag"/>
<src:fragref linkend="table.frame.border.thickness.frag"/>
<src:fragref linkend="tablecolumns.extension.frag"/>
<src:fragref linkend="target.database.document.frag"/>
<src:fragref linkend="targets.filename.frag"/>
<src:fragref linkend="tex.math.delims.frag"/>
<src:fragref linkend="tex.math.file.frag"/>
<src:fragref linkend="tex.math.in.alt.frag"/>
<src:fragref linkend="textinsert.extension.frag"/>
<src:fragref linkend="toc.list.type.frag"/>
<src:fragref linkend="toc.section.depth.frag"/>
<src:fragref linkend="ulink.target.frag"/>
<src:fragref linkend="use.embed.for.svg.frag"/>
<src:fragref linkend="use.extensions.frag"/>
<src:fragref linkend="use.id.as.filename.frag"/>
<src:fragref linkend="use.local.olink.style.frag"/>
<src:fragref linkend="use.role.as.xrefstyle.frag"/>
<src:fragref linkend="use.role.for.mediaobject.frag"/>
<src:fragref linkend="use.svg.frag"/>
<src:fragref linkend="variablelist.as.table.frag"/>
<src:fragref linkend="xref.with.number.and.title.frag"/>

&lt;/xsl:stylesheet&gt;</src:fragment>

</appendix>

</book>