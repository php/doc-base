<?xml version="1.0" encoding="iso-8859-1"?>
<!-- 

  HTML Help specific stylesheet

  $Id$

-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

<xsl:import href="htmlhelp-db.xsl"/>
<xsl:import href="html-common.xsl"/>

<xsl:param name="base.dir" select="'html/'"/>
<xsl:param name="use.id.as.filename" select="1"/>
<xsl:param name="htmlhelp.encoding" select="'@HTMLHELP_ENCODING@'"/>
<xsl:param name="default.encoding" select="'@HTMLHELP_ENCODING@'"/>
<xsl:param name="htmlhelp.chm" select="'php_manual_@LANG@.chm'"/>
<xsl:param name="htmlhelp.hhp" select="'php_manual_@LANG@.hhp'"/>
<xsl:param name="htmlhelp.hhc" select="'php_manual_@LANG@.hhc'"/>
<xsl:param name="htmlhelp.hhk" select="'php_manual_@LANG@.hhk'"/>
<xsl:param name="saxon.character.representation" select="'native'"/>

<xsl:param name="ulink.target" select="'_blank'"/>

<!-- ======================================================================
     Custom XSL code for PHP CHM Nanual 
 -->

<!-- Custom head content to make HTML files *small* -->
<xsl:template name="head.content">
  <xsl:param name="node" select="."/>

  <title>
    <xsl:apply-templates select="$node" mode="object.title.markup.textonly"/>
  </title>

  <script language="JavaScript1.2" src="_script.css"></script>

</xsl:template>

<!-- We need quite different body attribute[s] than the defaults -->
<xsl:template name="body.attributes">
  <xsl:attribute name="onload">displayPage();</xsl:attribute>
</xsl:template>

<!-- Our HTML head part is *extra* slim -->
<xsl:template name="html.head">
  <head>
    <xsl:call-template name="head.content"/>
  </head>
</xsl:template>

<!-- We need no header navigation (we'll need footer, so this is
     why I have not used supress.navigation=1) --> 
<xsl:template name="header.navigation" />

<!-- Footer part with special table for our special needs ;) -->
<xsl:template name="footer.navigation">
  <xsl:param name="prev" select="/foo"/>
  <xsl:param name="next" select="/foo"/>
  
  <table width="100%" border="0" cellspacing="10" cellpadding="0" class="navigation">
    <tr align="left" valign="middle"> 
      <td>
        <xsl:if test="count($prev)>0">
          <a accesskey="p">
            <xsl:attribute name="href">
              <xsl:call-template name="href.target">
                <xsl:with-param name="object" select="$prev"/>
              </xsl:call-template>
            </xsl:attribute>
            <xsl:text>&lt;&lt; </xsl:text>
            <xsl:apply-templates select="$prev" mode="htmlhelp.object.title"/>
          </a>
        </xsl:if>
      </td>
      <td align="center">
        <xsl:apply-templates select="." mode="path.to.this.page">
          <xsl:with-param name="actpage" select="true()"/>
        </xsl:apply-templates>
      </td>
      <td align="right">
        <xsl:if test="count($next)>0">
          <a accesskey="n">
            <xsl:attribute name="href">
              <xsl:call-template name="href.target">
                <xsl:with-param name="object" select="$next"/>
              </xsl:call-template>
            </xsl:attribute>
            <xsl:apply-templates select="$next" mode="htmlhelp.object.title"/>
            <xsl:text> &gt;&gt;</xsl:text>
          </a>
        </xsl:if>
      </td>
    </tr>
    <tr align="center" valign="middle"> 
      <td colspan="3">
        <a href="javascript:thisPageOnline();">This page online</a>
        <xsl:text disable-output-escaping="yes"> &amp;nbsp; </xsl:text>
        <a href="javascript:bugOnPage();">Report a bug</a>
      </td>
    </tr>
  </table>
</xsl:template>

<!-- Try to figure out the path to this page from the main page -->
<xsl:template match="*" mode="path.to.this.page">
  <xsl:param name="actpage" select="false()"/>
  <xsl:variable name="up" select="parent::*"/>

  <!-- Call this recursively for the parent -->
  <xsl:choose>
    <xsl:when test="count($up)>0">
      <xsl:apply-templates select="parent::*" mode="path.to.this.page">
        <xsl:with-param name="actpage" select="false()"/>
      </xsl:apply-templates>
    </xsl:when>
  </xsl:choose>

  <!-- Do not link if actual page, put " : " between links -->
  <xsl:choose>
    <xsl:when test="$actpage = true()">
      <xsl:apply-templates select="." mode="htmlhelp.object.title"/>
    </xsl:when>
    <xsl:otherwise>
      <a>
        <xsl:attribute name="href">
          <xsl:call-template name="href.target">
            <xsl:with-param name="object" select="."/>
          </xsl:call-template>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="htmlhelp.object.title"/>
      </a>
      <xsl:text> : </xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!-- This is the same as in DocBook XSL, except that we
     print out a &raquo; HTML entity before the link -->
<xsl:template match="ulink" name="ulink">
  <a>
    <xsl:if test="@id">
      <xsl:attribute name="name">
        <xsl:value-of select="@id"/>
      </xsl:attribute>
    </xsl:if>
    <xsl:attribute name="href"><xsl:value-of select="@url"/></xsl:attribute>
    <xsl:if test="$ulink.target != ''">
      <xsl:attribute name="target">
        <xsl:value-of select="$ulink.target"/>
      </xsl:attribute>
    </xsl:if>
    <xsl:text disable-output-escaping="yes">&amp;raquo; </xsl:text>
    <xsl:choose>
      <xsl:when test="count(child::node())=0">
	<xsl:value-of select="@url"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:apply-templates/>
      </xsl:otherwise>
    </xsl:choose>
  </a>
</xsl:template>

<!-- Custom mode for titles for navigation without
     "Chapter 1" and other autogenerated content -->
<xsl:template match="*" mode="htmlhelp.object.title">
  <xsl:call-template name="substitute-markup">
    <xsl:with-param name="allow-anchors" select="0"/>
    <xsl:with-param name="template" select="'%t'"/>
  </xsl:call-template>
</xsl:template>

<!-- Special reference page formatting for HH -->

<!--  Function page sample:
<h2 class="subheader">Format a local time/date. (PHP 3, PHP 4 &gt;= 4.0.0)<br>
Usage: string date (string format, int [timestamp])<br></h2>
-->
<xsl:template match="refnamediv">
  <div class="{name(.)}">
    <xsl:call-template name="anchor"/>
    <h2 class="subheader">
      <xsl:value-of select="./refpurpose"/>
      (<xsl:value-of select="$version/function[@name=string(current()/refname)]/@from"/>)
      <br/>
      <xsl:apply-templates select="../refsect1/methodsynopsis" mode="htmlhelp.methodsyn"/>
    </h2>
  </div>
</xsl:template>

<!-- Drop out constant "Description" -->
<xsl:template match="refsect1/title"/>
<xsl:template match="refsect1/refpurpose"/>

<!-- Avoid printout of methosyns, where we do not want them,
     but print out them in header -->
<xsl:template match="methodsynopsis"/>
<xsl:template match="methodsynopsis" mode="htmlhelp.methodsyn">
  <xsl:apply-templates/><br/>
</xsl:template>

<!-- do not enclose <methodname> in a <tt> -->
<xsl:template match="methodname">
  <xsl:call-template name="inline.charseq"/>
</xsl:template>

</xsl:stylesheet>
