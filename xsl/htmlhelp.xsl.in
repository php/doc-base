<?xml version="1.0" encoding="iso-8859-1"?>
<!-- 

  HTML Help specific stylesheet

  $Id$

-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0">

<xsl:import href="@DOCBOOKXSL_HTMLHELP@"/>
<xsl:include href="html-common.xsl"/>

<xsl:param name="base.dir" select="'html/'"/>
<xsl:param name="use.id.as.filename" select="1"/>
<xsl:param name="htmlhelp.encoding" select="'@HTMLHELP_ENCODING@'"/>
<xsl:param name="default.encoding" select="'@HTMLHELP_ENCODING@'"/>
<xsl:param name="saxon.character.representation" select="'native'"/>

<!-- ======================================================================
     Custom XSL code for PHP CHM Nanual 
 -->

<!-- Custom head content to make HTML files *small* -->
<xsl:template name="head.content">
  <xsl:param name="node" select="."/>

  <title>
    <xsl:apply-templates select="$node" mode="object.title.markup.textonly"/>
  </title>

  <script language="JavaScript1.2" src="_script.css"></script>

</xsl:template>

<!-- We need quite different body attribute[s] than the defaults -->
<xsl:template name="body.attributes">
  <xsl:attribute name="onload">displayPage();</xsl:attribute>
</xsl:template>

<!-- Our HTML head part is *extra* slim -->
<xsl:template name="html.head">
  <head>
    <xsl:call-template name="head.content"/>
  </head>
</xsl:template>

<!-- We need no header navigation (we'll need footer, so this is
     why I have not used supress.navigation=1) --> 
<xsl:template name="header.navigation" />

<!-- Footer part with special table for our special needs ;) -->
<xsl:template name="footer.navigation">
  <xsl:param name="prev" select="/foo"/>
  <xsl:param name="next" select="/foo"/>
  
  <table width="100%" border="0" cellspacing="10" cellpadding="0" class="navigation">
    <tr align="left" valign="middle"> 
      <td>
        <xsl:if test="count($prev)>0">
          <a accesskey="p">
            <xsl:attribute name="href">
              <xsl:call-template name="href.target">
                <xsl:with-param name="object" select="$prev"/>
              </xsl:call-template>
            </xsl:attribute>
            <xsl:text>&lt;&lt; </xsl:text>
            <xsl:apply-templates select="$prev" mode="object.title.markup"/>
          </a>
        </xsl:if>
      </td>
      <td align="center">
        <!-- this is infinite resursion ;)
        <xsl:call-template name="path.to.this.page">
          <xsl:with-param name="actpage" select="true()"/>
          <xsl:with-param name="up" select="parent::*"/>
        </xsl:call-template>
        -->
        :: path to this page here ::
      </td>
      <td align="right">
        <xsl:if test="count($next)>0">
          <a accesskey="n">
            <xsl:attribute name="href">
              <xsl:call-template name="href.target">
                <xsl:with-param name="object" select="$next"/>
              </xsl:call-template>
            </xsl:attribute>
            <xsl:apply-templates select="$next" mode="object.title.markup"/>
            <xsl:text> &gt;&gt;</xsl:text>
          </a>
        </xsl:if>
      </td>
    </tr>
    <tr align="center" valign="middle"> 
      <td colspan="3">
        <a href="javascript:thisPageOnline();">This page online</a>
        <xsl:text disable-output-escaping="yes"> &amp;nbsp; </xsl:text>
        <a href="javascript:bugOnPage();">Report a bug</a>
      </td>
    </tr>
  </table>
</xsl:template>

<!-- Comment out infinite recursion for now 
<!- Try to figure out the path to this page from the main page ->
<xsl:template name="path.to.this.page">
  <xsl:param name="actpage" select="false()"/>
  <xsl:variable name="up" select="parent::*"/>

  <!- Call this recursively for the parent ->
  <xsl:choose>
    <xsl:when test="count($up)>0">
      <xsl:call-template name="path.to.this.page">
        <xsl:with-param name="actpage" select="false()"/>
      </xsl:call-template>
    </xsl:when>
  </xsl:choose>

  <!- Do not link if actual page, put " : " between links ->
  <xsl:choose>
    <xsl:when test="$actpage = true()">
      <xsl:apply-templates select="." mode="object.title.markup"/>
    </xsl:when>
    <xsl:otherwise>
      <a>
        <xsl:attribute name="href">
          <xsl:call-template name="href.target">
            <xsl:with-param name="object" select="."/>
          </xsl:call-template>
        </xsl:attribute>
        <xsl:apply-templates select="." mode="object.title.markup"/>
      </a>
      <xsl:text> : </xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>
-->

</xsl:stylesheet>
