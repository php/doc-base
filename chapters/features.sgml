 <chapter id="features">
  <title>Features</title>
  <simpara></simpara>

  <sect1 id="feature-httpauth">
   <title>HTTP authentication with PHP</title>

   <simpara>
    The HTTP Authentication hooks in PHP are only available when it is
    running as an Apache module and is hence not available in the CGI version.
    In an Apache module PHP script, it is possible to use the 
    <function>Header</function> function to send an "Authentication Required" 
    message to the client browser causing it to pop up a Username/Password 
    input window.  Once the user has filled in a username and a password, 
    the URL containing the PHP script will be called again with the variables,
    $PHP_AUTH_USER, $PHP_AUTH_PW and $PHP_AUTH_TYPE set to the user
    name, password and authentication type respectively.  Only "Basic"
    authentication is supported at this point. See the <function>Header</function>
    function for more information.
   
   <para>
    An example script fragment which would force client authentication
    on a page would be the following:

    <example>
     <title>HTTP Authentication example</title>
     <programlisting role=php>
&lt;?php
  if(!isset($PHP_AUTH_USER)) {
    Header(&quot;WWW-Authenticate: Basic realm=\&quot;My Realm\&quot;&quot;);
    Header(&quot;HTTP/1.0 401 Unauthorized&quot;);
    echo &quot;Text to send if user hits Cancel button\n&quot;;
    exit;
  } else {
    echo &quot;Hello $PHP_AUTH_USER.&lt;P&gt;&quot;;
    echo &quot;You entered $PHP_AUTH_PW as your password.&lt;P&gt;&quot;;
  }
?>
     </programlisting>
    </example>

   <para>
    Instead of simply printing out the $PHP_AUTH_USER and
    $PHP_AUTH_PW, you would probably want to check the username and
    password for validity.  Perhaps by sending a query to a database,
    or by looking up the user in a dbm file.
   <para>
    Watch out for buggy Internet Explorer browsers out there.  They
    seem very picky about the order of the headers.  Sending the
    <emphasis>WWW-Authenticate</emphasis> header before the
    <errorcode>HTTP/1.0 401</errorcode> header seems to do the trick
    for now.
   <simpara>
    In order to prevent someone from writing a script which reveals
    the password for a page that was authenticated through a
    traditional external mechanism, the PHP_AUTH variables will not be
    set if external authentication is enabled for that particular
    page. In this case, the $REMOTE_USER variable can be used to
    identify the externally-authenticated user.
   <simpara>
    Note, however, that the above does not prevent someone who
    controls a non-authenticated URL from stealing passwords from
    authenticated URLs on the same server.
   <simpara>
    Both Netscape and Internet Explorer will clear the local browser
    window's authentication cache for the realm upon receiving a
    server response of 401. This can effectively "log out" a user,
    forcing them to re-enter their username and password. Some people
    use this to "time out" logins, or provide a "log-out" button.
   <simpara>
    <example>
      <title>HTTP Authentication example forcing a new name/password</title>
      <programlisting role=php>
&lt;?php
  function  authenticate()  {
    Header( &quot;WWW-authenticate:  basic  realm='Test  Authentication  System'&quot;);
    Header( &quot;HTTP/1.0  401  Unauthorized&quot;);
    echo  &quot;You  must  enter  a  valid  login  ID  and  password  to  access  this  resource\n&quot;;
    exit;
  }

  if(!isset($PHP_AUTH_USER)  ||  ($SeenBefore ==  1  &&  !strcmp($OldAuth,  $PHP_AUTH_USER))  )  {
    authenticate();
  }  
  else  {
    echo  &quot;Welcome:  $PHP_AUTH_USER&lt;BR&gt;&quot;;
    echo  &quot;Old:  $OldAuth&quot;;
    echo  &quot;&lt;FORM  ACTION=\&quot;$PHP_SELF\&quot;  METHOD=POST&gt;\n&quot;;
    echo  &quot;&lt;INPUT  TYPE=HIDDEN  NAME=\&quot;SeenBefore\&quot;  VALUE=\&quot;1\&quot;&gt;\n&quot;;
    echo  &quot;&lt;INPUT  TYPE=HIDDEN  NAME=\&quot;OldAuth\&quot;  VALUE=\&quot;$PHP_AUTH_USER\&quot;&gt;\n&quot;;
    echo  &quot;&lt;INPUT  TYPE=Submit  VALUE=\&quot;Re  Authenticate\&quot;&gt;\n&quot;;
    echo  &quot;&lt;/FORM&gt;\n&quot;;

}
?>
    </programlisting>
   </example>
   <simpara>
    This behavior is not required by the HTTP Basic authentication
    standard, so you should never depend on this. Testing with Lynx
    has shown that Lynx does not clear the authentication credentials
    with a 401 server response, so pressing back and then forward
    again will open the resource (as long as the credential
    requirements haven't changed).
   <simpara>
    Also note that this does not work using Microsoft's IIS server and
    the CGI version of PHP due to a limitation of IIS.


  <sect1 id="feature-images">
   <title>GIF creation with PHP</title>

   <simpara>
    PHP is not limited to creating just HTML output.  It can also be
    used to create GIF image files, or even more convenient GIF image
    streams.  You will need to compile PHP with the GD library of
    image functions for this to work.
   </simpara>
   <para>
    <example>
     <title>GIF creation with PHP</title>
     <programlisting role=php>
&lt;?php
    Header("Content-type: image/gif");
    $string=implode($argv," ");
    $im = imagecreatefromgif("images/button1.gif");
    $orange = ImageColorAllocate($im, 220, 210, 60);
    $px = (imagesx($im)-7.5*strlen($string))/2;
    ImageString($im,3,$px,9,$string,$orange);
    ImageGif($im);
    ImageDestroy($im);
?>
     </programlisting>
    </example>

    This example would be called from a page with a tag like: &lt;img
    src=&quot;button.php3?text&quot;&gt; The above button.php3 script
    then takes this &quot;text&quot; string an overlays it on top of a
    base image which in this case is &quot;images/button1.gif&quot;
    and outputs the resulting image.  This is a very convenient way to
    avoid having to draw new button images every time you want to
    change the text of a button.  With this method they are
    dynamically generated.
   </para>


  <sect1 id="feature-fileupload">
   <title>File upload support</title>

   <simpara>
    PHP is capable of receiving file uploads from any RFC-1867
    compliant browser (which includes Netscape Navigator 3 or later,
    Microsoft Internet Explorer 3 with a patch from Microsoft, or
    later without a patch).  This feature lets people upload both text
    and binary files.  With PHP's authentication and file manipulation
    functions, you have full control over who is allowed to upload and
    what is to be done with the file once it has been uploaded.
   </simpara>
   <para>
	Note that PHP also supports PUT-method file uploads as used by 
	Netscape Composer and W3C's Amaya clients.  See the
	<link linkend="feature-putsupport">PUT Method Support</link> for more 
	details.
   </para>

   <para>
    A file upload screen can be built by creating a special form which
    looks something like this:

    <example>
     <title>File Upload Form</title>
     <programlisting>
&lt;FORM ENCTYPE=&quot;multipart/form-data&quot; ACTION=&quot;_URL_&quot; METHOD=POST&gt;
&lt;INPUT TYPE=&quot;hidden&quot; name=&quot;MAX_FILE_SIZE&quot; value=&quot;1000&quot;&gt;
Send this file: &lt;INPUT NAME=&quot;userfile&quot; TYPE=&quot;file&quot;&gt;
&lt;INPUT TYPE=&quot;submit&quot; VALUE=&quot;Send File&quot;&gt;
&lt;/FORM&gt;
     </programlisting>
    </example>
    
    The _URL_ should point to a php html file.  The MAX_FILE_SIZE
    hidden field must precede the file input field and its value is
    the maximum filesize accepted.  The value is in bytes.  In this
    destination file, the following variables will be defined upon a
    successful upload:
    <para>
     <itemizedlist>
      <listitem>
       <simpara>
        $userfile - The temporary filename in which the uploaded file
        was stored on the server machine.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        $userfile_name - The original name of the file on the sender's
        system.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        $userfile_size - The size of the uploaded file in bytes.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        $userfile_type - The mime type of the file if the browser
        provided this information.  An example would be
        &quot;image/gif&quot;.
       </simpara>
      </listitem>
     </itemizedlist>
    
    Note that the &quot;$userfile&quot; part of the above variables is
    whatever the name of the INPUT field of TYPE=file is in the upload
    form.  In the above upload form example, we chose to call it
    &quot;userfile&quot;.
  
   <simpara>
    Files will by default be stored in the server's default temporary
    directory.  This can be changed by setting the environment
    variable TMPDIR in the environment in which PHP runs.  Setting it
    using a PutEnv() call from within a PHP script will not work
    though.
   <simpara>
    The PHP script which receives the uploaded file should implement
    whatever logic is necessary for determining what should be done
    with the uploaded file.  You can for example use the $file_size
    variable to throw away any files that are either too small or too
    big.  You could use the $file_type variable to throw away any
    files that didn't match a certain type criteria.  Whatever the
    logic, you should either delete the file from the temporary
    directory or move it elsewhere.
   <simpara>
    The file will be deleted from the temporary directory at the end
    of the request if it has not been moved away or renamed.
   <para>
   Common Pitfalls:
   <simpara>
    The MAX_FILE_SIZE item cannot specify a file size greater than the file 
    size that has been set in the upload_max_filesize in the PHP3.ini file
    or the corresponding php3_upload_max_filesize Apache .conf directive. 
    The default is 2 Megabytes.
   <simpara>
    Please note that the CERN httpd seems to strip off everything
    starting at the first whitespace in the content-type mime header
    it gets from the client.  As long as this is the case, CERN httpd
    will not support the file upload feature.
  </sect1>

  <sect1 id="feature-putsupport">
   <title>PUT Method Support</title>
   <simpara>
    PHP provides support for the HTTP PUT method used by clients such
    as Netscape Composer and W3C Amaya.  PUT requests are much simpler
    than a file upload and they look something like this:
   </simpara>
   <simpara>
    <emphasis>PUT /path/filename.html HTTP/1.1</emphasis>
   </simpara>
   <simpara>
    This would normally mean that the remote client would like to save
    the content that follows as: /path/filename.html in your web tree.
    It is obviously not a good idea for Apache or PHP to automatically
    let everybody overwrite any files in your web tree.  So, to handle
    such a request you have to first tell your web server that you
    want a certain PHP script to handle the request.  In Apache you do
    this with the <emphasis>Script</emphasis> directive.  It can be
    placed almost anywhere in your Apache configuration file.  A
    common place is inside a &lt;Directory&gt; block or perhaps inside
    a &lt;Virtualhost&gt; block.  A line like this would do the trick:
   </simpara>
   <simpara>
    <emphasis>Script PUT /put.php3</emphasis>
   </simpara>
   <simpara>
    This tells Apache to send all PUT requests for URIs that match the
    context in which you put this line to the put.php3 script.  This
    assumes, of course, that you have PHP enabled for the .php3
    extension and PHP is active.
   </simpara>
   <simpara>
    Inside your put.php3 file you would then do something like this:
   </simpara>
   <simpara>
    &lt;? copy($PHP_UPLOADED_FILE_NAME,$DOCUMENT_ROOT.$REQUEST_URI); ?&gt;
   </simpara>
   <simpara>
    This would copy the file to the location requested by the remote
    client.  You would probably want to perform some checks and/or
    authenticate the user before performing this file copy.  The only
    trick here is that when PHP sees a PUT-method request it stores
    the uploaded file in a temporary file just like the <link
    linkend="feature-fileupload">File Upload</link> feature.  When the
    request ends, this temporary file is deleted.  So, your PUT
    handling PHP script has to copy that file somewhere.  The filename
    of this temporary file is in the $PHP_PUT_FILENAME variable, and
    you can see the suggested destination filename in the $REQUEST_URI
    (may vary on non-Apache web servers).  This destination filename
    is the one that the remote client specified.  You do not have to
    listen to this client.  You could, for example, copy all uploaded
    files to a special uploads directory.
   </simpara>
  </sect1>

  <sect1 id="feature-cookies">
   <title>HTTP cookie support</title>

   <para>
    PHP transparently supports HTTP cookies.  Cookies are a mechanism
    for storing data in the remote browser and thus tracking or
    identifying return users.  You can set cookies using the
    <function>setcookie</function> function.  Cookies are part of the
    HTTP header, so the SetCookie() function must be called before any
    output is sent to the browser.  This is the same restriction as
    for the <function>Header</function> function.
   <para>
    Any cookies sent to you from the client will automatically be
    turned into a PHP variable just like GET and POST method data.  If
    you wish to assign multiple values to a single cookie, just add
    <emphasis>[]</emphasis> to the cookie name.  For more details see
    the <function>setcookie</function> function.
  </sect1>


  <sect1 id="feature-regexps">
   <title>Regular expressions</title>

   <para>
    Regular expressions are used for complex string manipulation in
    PHP.  The functions that support regular expressions are:

    <itemizedlist>
     <listitem>
      <simpara><function>ereg</function>
     </listitem>
     <listitem>
      <simpara><function>ereg_replace</function>
     </listitem>
     <listitem>
      <simpara><function>eregi</function>
     </listitem>
     <listitem>
      <simpara><function>eregi_replace</function>
     </listitem>
     <listitem>
      <simpara><function>split</function>
     </listitem>
    </itemizedlist>

    These functions all take a regular expression string as their
    first argument.  PHP uses the POSIX extended regular expressions
    as defined by POSIX 1003.2.  For a full description of POSIX
    regular expressions see the regex man pages included in the regex
    directory in the PHP distribution.


   <para>
    <example>
     <title>Regular expression examples</title>
     <programlisting>
ereg(&quot;abc&quot;,$string);            
/* Returns true if &quot;abc&quot;
   is found anywhere in $string. */

ereg(&quot;^abc&quot;,$string);
/* Returns true if &quot;abc&quot;
   is found at the beginning of $string. */

ereg("abc$",$string);
/* Returns true if &quot;abc&quot;
   is found at the end of $string. */

eregi("(ozilla.[23]|MSIE.3)",$HTTP_USER_AGENT);  
/* Returns true if client browser
   is Netscape 2, 3 or MSIE 3. */

ereg("([[:alnum:]]+) ([[:alnum:]]+) ([[:alnum:]]+)",
     $string,$regs); 
/* Places three space separated words
   into $regs[1], $regs[2] and $regs[3]. */

ereg_replace("^","&lt;BR&gt;",$string); 
/* Put a &lt;BR&gt; tag at the beginning of $string. */
 
ereg_replace("$","&lt;BR&gt;",$string); 
/* Put a &lt;BR&gt; tag at the end of $string. */

ereg_replace("\n","",$string);
/* Get rid of any carriage return
   characters in $string. */
     </programlisting>
    </example>


  <sect1 id="feature-error-handling">
   <title>Error handling</title>

   <para>
    There are 4 types of errors and warnings in PHP.  They are:

    <itemizedlist>
     <listitem><simpara>1 - Normal Function Errors
     <listitem><simpara>2 - Normal Warnings 
     <listitem><simpara>4 - Parser Errors 
     <listitem><simpara>8 - Notices (warnings you can ignore but which
      may imply a bug in your code)
    </itemizedlist>

   <simpara>
    The above 4 numbers are added up to define an error reporting
    level.  The default error reporting level is 7 which is 1 + 2 + 4,
    or everything except notices.  This level can be changed in the
    php3.ini file with the error_reporting directive.  It can also be
    set in your Apache httpd.conf file with the php3_error_reporting
    directive or lastly it may be set at runtime within a script using
    the <function>error_reporting</function> function.
	
   <simpara>	
    All <link linkend="expressions">PHP expressions</link> can also be called
    with the "@" prefix, which turns off error reporting for that particular
    expression.  If an error occurred during such an expression and the
    <link linkend="ini.track-errors">track_errors</link> feature
    is enabled, you can find the error message in the global variable
    $php_errormsg.

  </sect1>

  <sect1 id="feature-connection-handling">
	<title>Connection  Handling</title>
	<simpara>
	The following applies to PHP version 3.0.7 and later.
	</simpara>
	<para>
	Internally in PHP a connection status is maintained.  There are 3 possible states:
	<itemizedlist>
	 <listitem><simpara>0 - NORMAL
	 <listitem><simpara>1 - ABORTED
	 <listitem><simpara>2 - TIMEOUT
    </itemizedlist>
	</para>
	<simpara>
	When a PHP script is running normally the NORMAL state, is active.  If the
	remote client disconnects the ABORTED state flag is turned on.  A remote client
	disconnect is usually caused by the user hitting his STOP button.  If the PHP-imposed
	time limit (see <function>set_time_limit</function>) is hit, the TIMEOUT state flag
	is turned on.
	</simpara>
	<simpara>
	You can decide whether or not you want a client disconnect to cause your script to be
	aborted.  Sometimes it is handy to always have your scripts run to completion even if
	there is no remote browser receiving the output.  The default behaviour is however for your
	script to be aborted when the remote client disconnects.  This behaviour can be set via the
	ignore_user_abort php3.ini directive as well as through the corresponding php3_ignore_user_abort
	Apache .conf directive or with the <function>ignore_user_abort</function> function.  If you do
	not tell PHP to ignore a user abort and the user aborts, your script will terminate.  The one
	exception is if you have registered a shutdown function using 
	<function>register_shutdown_function</function>.  With a shutdown function, when the remote user hits
	his STOP button, the next time your script tries to output something PHP will detect that the connection
	has been aborted and the shutdown function is called.  This shutdown function will also get called at
	the end of your script terminating normally, so to do something different in case of a client
	diconnect you can use the <function>connection_aborted</function> function.  This function will return
	true if the connection was aborted.  
	</simpara>
	<simpara>
	Your script can also be terminated by the built-in script timer.  The default timeout is 30 seconds.
	It can be changed using the max_execution_time php3.ini directive or the corresponding 
	php3_max_execution_time Apache .conf directive as well as with the <function>set_time_limit</function>
	function.  When the timer expires the script will be aborted and as with the above client disconnect
	case, if a shutdown function has been registered it will be called.  Within this shutdown function
	you can check to see if a timeout caused the shutdown function to be called by calling the
	<function>connection_timeout</function> function.  This function will return true if a timeout caused
	the shutdown function to be called.
	</simpara>
	<simpara>
	One thing to note is that both the ABORTED and the TIMEOUT states can be active at the same time.  This
	is possible if you tell PHP to ignore user aborts.  PHP will still note the fact that a user may have
	broken the connection, but the script will keep running.  If it then hits the time limit it will be aborted
	and your shutdown function, if any, will be called.  At this point you will find that 
	<function>connection_timeout</function> and <function>connection_aborted</function> return true.  You can also
	check both states in a single call by using the <function>connection_status</function>.  This function
	returns a bitfield of the active states.  So, if both states are active it would return 3, for example.
	</simpara>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
