<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="classname.methodname" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <!-- If this is a method, use this -->
  <refname>ClassName::methodName</refname>
  <!-- If this is a property, use this instead -->
  <refname>ClassName->propertyName</refname>
<!-- IF OOP & PROCEDURAL

IN GENERAL:  If this method also has a procedural mapping, please use the
instructions and code found inside the "IF OOP & PROCEDURAL" comments.

REFNAME:  Procedural refname goes after the OOP refname.

  <refname>function_name</refname>
-->
  <refpurpose>The methodName purpose</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
<!-- IF OOP & PROCEDURAL.
  <para>&style.oop;</para>
-->
<!-- Use constructorsynopsis and destructorsynopsis rather than methodsynopsis for __construct and __destruct
     There is no return <type> for the constructorsynopsis/destructorsynopsis -->
  <methodsynopsis role="oop">
   <!-- Example: All methods have this. Don't use <void> for the return type, use <type>void</type> instead. -->
   <type>thereturned type</type><methodname>ClassName::methodName</methodname>
   <!-- Example: Required parameter -->
   <methodparam><type>param1type</type><parameter>firstparameter</parameter></methodparam>
   <!-- Example: Optional parameter, also by reference -->
   <methodparam choice="opt"><type>int</type><parameter role="reference">secondparameter</parameter><initializer>defaultvalue</initializer></methodparam>
   <!-- Example: If no methodparams exist (void), use this -->
   <void />
  </methodsynopsis>
<!-- If this is a property, not a method, use this instead
  <classsynopsis>
   <ooclass><classname>className</classname></ooclass>
   <fieldsynopsis><modifier>public</modifier><modifier>static</modifier><type>string</type><varname>name</varname></fieldsynopsis>
  </classsynopsis>
-->
<!-- IF OOP & PROCEDURAL

Procedural synopsis goes after OOP synopsis.

  <para>&style.procedural;</para>
  <methodsynopsis role="procedural">
   [Fill in function's parameter details just like in
   function.xml/refentry/refsect1[@role=description]/methodsynopsis]
  </methodsynopsis>
-->
  <para>
   The function description goes here.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>firstparameter</parameter></term>
    <listitem>
     <para>
      Its description
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>secondparameter</parameter></term>
    <listitem>
     <para>
      Its description
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   What this function returns, first on success, then failure.  If simply
   true on success and false on failure, just use &return.success; here.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   When does this function issue E_* level errors, and/or throw exceptions.
  </para>
 </refsect1>

 <refsect1 role="unicode">
  &reftitle.unicode;
  <para>
   Information specific to unicode, from the PHP 6 changes.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>Enter the version of change here</entry>
      <entry>
       Describe the change
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example xml:id="classname.methodname.example.basic">
   <title><methodname>ClassName::methodName</methodname> example</title>
   <para>
     Any text that describes the purpose of the example, or what
     goes on in the example should be here. (Inside the <example> tag, not out).
   </para>
<!-- IF OOP & PROCEDURAL
   <para>&style.oop;</para>
-->
   <programlisting role="php">
<![CDATA[
<?php
if ($anexample === true) {
    echo 'Use the PEAR Coding standards';
}
if ($thereisoutput === 'and it is multiple lines') {
    echo 'Use a screen like we did below';
}
?>
]]>
   </programlisting>
<!-- IF OOP & PROCEDURAL

The first example should be a very basic demonstration of how to do the
same task in both OOP and procedural PHP. Each of these demonstrations
should be in their own program listings with the appropriate &style.*
entity above it. The OOP way must be first.

   <para>&style.procedural;</para>
   <programlisting role="php">
<![CDATA[
<?php
echo same_task_as_above();
?>
]]>
   </programlisting>

Also, use these plural output entities instead:
   &examples.outputs;
   &examples.outputs.similar;
-->
   &example.outputs;
   <screen>
<![CDATA[
Use the PEAR Coding standards
Use a screen like we did below
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    Any notes that don't fit anywhere else should go here.
    90% of the time, notes, warnings or cautions are better placed in the
    parameters section. Consider that before using this section!
   </para>
  </caution>
  &note.language-construct;
  &note.not-bin-safe;
  &note.registerglobals;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><methodname>ClassName::otherMethodName</methodname></member>
   <member><function>somefunc</function></member>
   <member>The <link linkend="something">something appendix</link></member>
  </simplelist>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
